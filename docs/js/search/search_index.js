var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/APIError.html",[0,0.753,1,1.443]],["body/interfaces/APIError.html",[0,1.34,1,2.221,2,1.439,3,0.383,4,0.383,5,0.299,6,1.439,7,0.476,8,1.108,9,2.192,10,2.383,11,1.34,12,0.783,13,0.031,14,1.26,15,0.582,16,2.043,17,0.577,18,1.72,19,0.884,20,0.959,21,0.608,22,1.219,23,1.798,24,1.955,25,1.72,26,1.569,27,1.439,28,1.955,29,0.959,30,1.882,31,1.323,32,1.323,33,1.125,34,1.798,35,1.657,36,1.798,37,1.798,38,2.383,39,2.221,40,2.043,41,1.529,42,1.219,43,1.219,44,2.221,45,1.955,46,1.108,47,1.039,48,1.569,49,1.569,50,0.021,51,0.021]],["title/interfaces/APIResponseError.html",[0,0.753,35,1.223]],["body/interfaces/APIResponseError.html",[0,1.342,1,2.388,2,1.446,3,0.385,4,0.385,5,0.3,6,1.446,7,0.478,8,1.112,9,1.33,10,1.446,11,1.245,12,0.767,13,0.031,14,1.196,15,0.584,16,2.048,17,0.58,18,1.724,19,0.889,20,0.964,21,0.608,22,1.226,23,1.805,24,1.962,25,1.724,26,1.577,27,1.446,28,1.962,29,0.964,30,1.887,31,1.33,32,1.33,33,1.131,34,1.805,35,1.887,36,1.805,37,1.805,38,2.496,39,2.388,40,2.368,41,1.534,42,2.024,43,1.226,44,2.227,45,1.962,46,1.112,47,1.044,48,1.577,49,1.577,50,0.021,51,0.021]],["title/injectables/APIResponseInterceptor.html",[52,0.961,53,2.366]],["body/injectables/APIResponseInterceptor.html",[3,0.416,4,0.416,5,0.324,7,0.517,12,0.465,13,0.031,15,0.763,16,1.437,17,0.627,18,1.671,19,0.961,20,1.041,21,0.369,29,1.543,33,1.811,40,1.437,45,1.563,46,0.886,47,1.128,50,0.022,51,0.022,52,1.377,53,3.389,54,1.704,55,3.891,56,3.891,57,2.943,58,1.901,59,3.891,60,3.891,61,4.639,62,3.798,63,4.639,64,1.325,65,3.518,66,1.437,67,1.325,68,1.437,69,2.943,70,1.325,71,4.36,72,3.891,73,3.518,74,2.563,75,3.518,76,2.764,77,2.054,78,2.943,79,3.518,80,2.28,81,2.943,82,2.28,83,0.416,84,2.054,85,1.437,86,2.943,87,2.067,88,2.943,89,3.518,90,2.563,91,2.563,92,2.943]],["title/interfaces/APIResponseMeta.html",[0,0.753,39,1.443]],["body/interfaces/APIResponseMeta.html",[0,1.337,1,1.945,2,1.428,3,0.38,4,0.38,5,0.296,6,1.428,7,0.472,8,1.102,9,1.313,10,1.428,11,1.337,12,0.781,13,0.031,14,1.191,15,0.579,16,2.359,17,0.573,18,1.714,19,0.878,20,0.951,21,0.606,22,1.21,23,1.789,24,1.945,25,1.851,26,1.557,27,1.428,28,1.945,29,0.951,30,1.875,31,1.313,32,1.313,33,1.116,34,1.789,35,1.649,36,1.789,37,1.789,38,2.375,39,2.375,40,2.359,41,1.521,42,1.21,43,1.21,44,2.212,45,1.945,46,1.102,47,1.714,48,1.557,49,1.557,50,0.021,51,0.021]],["title/interfaces/APIResponseOneData.html",[0,0.753,36,1.327]],["body/interfaces/APIResponseOneData.html",[0,1.338,1,1.948,2,1.431,3,0.381,4,0.381,5,0.297,6,1.431,7,0.473,8,1.104,9,1.317,10,1.431,11,1.24,12,0.764,13,0.032,14,1.192,15,0.58,16,2.037,17,0.574,18,1.895,19,0.88,20,0.954,21,0.607,22,1.213,23,1.792,24,1.948,25,1.716,26,1.561,27,1.431,28,1.948,29,0.954,30,2.226,31,1.317,32,1.317,33,1.119,34,1.792,35,1.651,36,2.037,37,1.792,38,2.487,39,2.215,40,2.037,41,1.524,42,1.213,43,1.213,44,2.378,45,2.487,46,1.104,47,1.033,48,1.561,49,1.561,50,0.021,51,0.021]],["title/interfaces/APIResponsePaginatedData.html",[0,0.753,37,1.327]],["body/interfaces/APIResponsePaginatedData.html",[0,1.342,1,1.962,2,1.446,3,0.385,4,0.385,5,0.3,6,1.446,7,0.478,8,1.112,9,1.33,10,1.446,11,1.245,12,0.767,13,0.031,14,1.196,15,0.584,16,2.048,17,0.58,18,1.96,19,0.889,20,0.964,21,0.608,22,1.226,23,1.805,24,1.962,25,1.724,26,1.577,27,1.446,28,1.962,29,0.964,30,1.887,31,1.33,32,1.33,33,1.131,34,1.805,35,1.663,36,1.805,37,2.048,38,2.496,39,2.227,40,2.048,41,1.534,42,1.226,43,1.226,44,2.388,45,2.496,46,1.112,47,1.044,48,1.577,49,1.577,50,0.021,51,0.021]],["title/interfaces/APIResponseSuccess.html",[0,0.753,44,1.443]],["body/interfaces/APIResponseSuccess.html",[0,1.35,1,1.986,2,1.473,3,0.392,4,0.392,5,0.306,6,1.473,7,0.487,8,1.126,9,1.355,10,1.473,11,1.255,12,0.748,13,0.031,14,1.203,15,0.592,16,2.067,17,0.591,18,1.737,19,0.905,20,0.981,21,0.612,22,1.248,23,1.827,24,1.986,25,1.737,26,1.606,27,1.473,28,1.986,29,0.981,30,1.905,31,1.355,32,1.355,33,1.152,34,1.827,35,1.684,36,1.827,37,1.827,38,2.512,39,2.406,40,2.38,41,1.553,42,1.248,43,1.248,44,2.406,45,1.986,46,1.126,47,1.063,48,1.606,49,1.606,50,0.021,51,0.021]],["title/injectables/CachingService.html",[52,0.961,93,1.573]],["body/injectables/CachingService.html",[3,0.323,4,0.323,5,0.252,7,0.401,8,0.983,11,1.361,12,0.725,13,0.031,14,1.121,15,0.697,17,0.486,21,0.287,22,1.984,23,2.153,24,1.212,26,1.322,27,1.212,28,2.34,29,1.559,30,1.984,32,2.153,46,0.687,50,0.019,51,0.019,52,1.156,54,1.322,58,1.596,64,2.064,66,2.239,67,1.875,68,2.034,70,1.875,83,0.323,85,1.863,87,2.34,93,1.891,94,2.282,95,2.64,96,2.418,97,4.561,98,2.28,99,4.979,100,3.266,101,1.768,102,2.729,103,3.906,104,3.906,105,3.906,106,2.729,107,3.369,108,2.729,109,3.906,110,2.729,111,3.906,112,2.729,113,1.988,114,1.212,115,1.322,116,3.906,117,2.531,118,2.729,119,1.988,120,2.729,121,1.988,122,1.988,123,1.768,124,2.729,125,2.729,126,4.561,127,2.282,128,4.561,129,2.729,130,2.729,131,2.729,132,2.729,133,2.729]],["title/injectables/DatabaseService.html",[52,0.961,134,1.443]],["body/injectables/DatabaseService.html",[3,0.23,4,0.23,5,0.18,7,0.286,12,0.761,13,0.031,14,1.028,15,0.493,17,0.347,18,0.624,19,0.532,20,0.898,21,0.204,25,1.195,30,1.403,41,1.054,50,0.014,51,0.014,52,0.898,54,0.943,58,1.24,64,2.064,66,2.349,67,2.064,68,2.24,70,1.965,82,1.262,83,0.23,85,1.974,87,2.554,95,1.976,96,1.032,98,1.771,101,1.262,107,3.395,113,1.419,114,0.865,115,0.943,134,1.348,135,1.629,136,3.034,137,1.771,138,1.966,139,3.117,140,1.771,141,2.538,142,2.538,143,1.966,144,1.947,145,4.832,146,1.947,147,3.034,148,4.562,149,4.562,150,1.947,151,1.947,152,2.538,153,5.151,154,3.52,155,1.947,156,2.597,157,2.538,158,1.813,159,1.947,160,2.538,161,4.041,162,4.209,163,1.947,164,1.629,165,2.456,166,2.727,167,2.767,168,1.947,169,2.538,170,3.52,171,1.947,172,2.538,173,1.947,174,4.041,175,2.538,176,3.52,177,1.947,178,2.538,179,1.947,180,1.419,181,1.419,182,1.629,183,1.032,184,1.419,185,4.22,186,4.832,187,1.947,188,1.947,189,1.947,190,1.947,191,1.419,192,1.629,193,1.629,194,1.262,195,1.947,196,1.947,197,3.034,198,1.947,199,1.947,200,1.947,201,1.947,202,1.947,203,2.538,204,1.947,205,1.629,206,1.419,207,1.032,208,1.947,209,1.419,210,1.629]],["title/classes/DefaultExceptionFilter.html",[83,0.384,211,2.366]],["body/classes/DefaultExceptionFilter.html",[3,0.348,4,0.348,5,0.271,7,0.431,8,1.036,9,2.102,10,2.494,11,0.681,12,0.389,13,0.032,14,0.625,15,0.717,16,1.2,17,0.523,21,0.308,33,1.429,40,1.2,41,1.021,42,1.549,47,0.942,50,0.02,51,0.02,58,1.681,64,1.549,66,1.2,67,1.106,68,1.2,70,1.106,76,2.728,77,1.715,80,3.078,83,0.348,84,2.402,85,1.94,90,2.14,91,2.14,92,3.972,95,2.518,96,2.518,114,1.305,115,1.423,121,2.14,180,2.998,181,2.14,183,1.558,207,2.518,209,2.14,210,2.457,211,2.998,212,1.715,213,3.972,214,3.972,215,2.457,216,4.749,217,3.972,218,5.146,219,4.115,220,2.938,221,4.115,222,4.749,223,5.146,224,2.938,225,5.417,226,2.938,227,2.457,228,4.115,229,4.115,230,4.115,231,2.938,232,2.457,233,2.938,234,2.938,235,2.457,236,2.938,237,2.938,238,2.457,239,2.457,240,2.938,241,2.938,242,2.938,243,2.938,244,2.938,245,2.938,246,2.457,247,2.457,248,2.938,249,2.938,250,2.938,251,2.938,252,2.938]],["title/entities/Example.html",[156,1.573,253,1.443]],["body/entities/Example.html",[3,0.453,4,0.453,5,0.353,7,0.562,8,1.237,11,1.327,12,0.758,13,0.031,14,1.046,15,0.65,21,0.402,25,1.576,46,1.237,50,0.023,51,0.023,64,2.157,83,0.453,84,2.234,114,1.7,156,2.38,158,1.886,183,2.029,253,2.183,254,2.234,255,3.201,256,3.518,257,3.518,258,3.518,259,4.173,260,6.064,261,3.827,262,5.429,263,3.827,264,3.827,265,3.827,266,3.827,267,2.869,268,3.201]],["title/controllers/ExampleController.html",[269,1.896,270,2.105]],["body/controllers/ExampleController.html",[3,0.218,4,0.218,5,0.17,7,0.271,12,0.789,13,0.031,14,1.236,15,0.654,17,0.328,18,1.153,19,0.503,20,0.86,21,0.193,29,1.208,46,1.358,47,0.931,50,0.014,51,0.014,58,1.187,64,1.673,66,1.815,67,1.984,68,1.815,70,2.072,83,0.719,85,0.753,87,1.974,98,2.099,107,3.149,137,2.383,138,1.883,140,1.696,143,2.646,156,2.841,158,2.099,165,1.696,166,2.646,167,1.54,184,1.342,203,2.43,207,2.165,253,2.699,254,1.696,259,3.237,269,1.075,270,1.883,271,1.541,272,1.342,273,1.541,274,2.503,275,1.842,276,3.415,277,4.512,278,3.891,279,2.905,280,2.152,281,2.905,282,1.842,283,1.541,284,1.842,285,1.842,286,2.905,287,2.905,288,3.948,289,1.842,290,1.541,291,1.842,292,1.842,293,2.905,294,1.842,295,1.541,296,1.842,297,1.842,298,2.43,299,2.905,300,1.842,301,1.541,302,3.415,303,2.755,304,1.842,305,1.842,306,2.905,307,1.842,308,2.905,309,1.541,310,2.43,311,1.541,312,1.907,313,1.541,314,1.541,315,1.541,316,1.541,317,1.842,318,1.842,319,2.905,320,4.721,321,4.443,322,1.842,323,0.977,324,1.842,325,1.342,326,1.842,327,1.842,328,1.842,329,1.842,330,1.842,331,1.842,332,1.842,333,1.842,334,1.842,335,1.842,336,1.842,337,1.842,338,1.842,339,1.842,340,1.842,341,1.842,342,1.842,343,1.842,344,1.842,345,1.842]],["title/classes/ExampleCreateDTO.html",[83,0.384,274,1.722]],["body/classes/ExampleCreateDTO.html",[3,0.551,4,0.551,5,0.429,13,0.031,15,0.734,21,0.489,38,2.466,50,0.026,51,0.026,83,0.551,158,1.928,212,2.719,274,2.943,280,2.256,323,2.47,346,3.896,347,5.551,348,3.896,349,3.896]],["title/classes/ExampleGetDTO.html",[83,0.384,280,1.573]],["body/classes/ExampleGetDTO.html",[3,0.341,4,0.341,5,0.266,7,0.424,8,1.022,11,1.357,12,0.815,13,0.031,14,1.086,15,0.622,21,0.303,25,1.637,46,1.498,50,0.019,51,0.019,64,1.922,67,2.205,83,0.604,84,2.371,156,2.472,158,1.992,212,1.684,253,2.68,256,3.487,257,3.487,258,3.487,259,3.719,267,2.745,268,2.412,277,4.897,278,3.794,280,1.967,323,1.529,350,2.412,351,5.105,352,3.397,353,4.269,354,2.885,355,2.885,356,2.885,357,2.885,358,3.397,359,4.062,360,2.885,361,2.885,362,3.397,363,2.885,364,2.885,365,5.381,366,4.062,367,4.702,368,4.062,369,4.702,370,2.101,371,2.412,372,2.412,373,2.412]],["title/interfaces/ExampleInterface.html",[0,0.753,267,1.896]],["body/interfaces/ExampleInterface.html",[0,0.992,2,1.901,3,0.507,4,0.507,5,0.395,7,0.629,8,1.327,11,1.445,12,0.789,13,0.03,14,1.216,21,0.449,25,1.832,50,0.025,51,0.025,158,2.072,256,3.865,257,3.865,258,3.865,267,3.078,374,3.58]],["title/modules/ExampleModule.html",[375,1.223,376,1.896]],["body/modules/ExampleModule.html",[3,0.453,4,0.453,5,0.353,13,0.031,15,0.784,17,0.682,21,0.402,50,0.023,51,0.023,83,0.453,134,2.693,270,3.518,271,4.11,312,3.215,313,3.201,375,2.044,376,3.713,377,1.7,378,1.7,379,2.234,380,2.234,381,1.854,382,3.169,383,2.234,384,3.201,385,3.201,386,3.201,387,3.215,388,2.869,389,2.234,390,1.854,391,3.827,392,3.185,393,3.827,394,3.201,395,3.827]],["title/injectables/ExampleService.html",[52,0.961,312,1.722]],["body/injectables/ExampleService.html",[3,0.288,4,0.288,5,0.224,7,0.357,8,0.904,12,0.72,13,0.032,14,1.215,15,0.72,17,0.433,18,0.779,19,0.664,20,0.719,21,0.377,29,1.062,50,0.017,51,0.017,52,1.062,54,1.177,58,1.467,64,2.05,66,2.151,67,1.982,68,2.151,70,1.894,76,1.288,83,0.288,85,0.993,87,2.338,95,2.263,96,2.499,98,2.095,101,1.575,107,3.573,114,1.079,115,1.177,137,2.095,138,2.326,140,2.095,143,2.326,158,1.983,165,2.095,166,3.055,167,2.887,184,1.77,253,1.079,273,3.002,274,2.499,276,3.002,280,1.177,283,3.002,290,3.002,295,3.002,301,3.002,302,3.943,303,2.752,312,1.903,314,2.032,315,2.032,316,2.032,396,1.77,397,4.269,398,6.121,399,2.43,400,2.55,401,3.59,402,2.43,403,2.43,404,2.43,405,2.43,406,2.43,407,2.43,408,2.43,409,2.032,410,2.032,411,1.77,412,2.032,413,2.43,414,2.43,415,2.032,416,2.032,417,2.43,418,2.032,419,2.43,420,2.032,421,2.032,422,2.43,423,2.43,424,2.43,425,2.43,426,2.43,427,2.43]],["title/classes/ExampleUpdateDTO.html",[83,0.384,303,1.896]],["body/classes/ExampleUpdateDTO.html",[3,0.549,4,0.549,5,0.428,13,0.031,15,0.733,21,0.487,38,2.46,50,0.026,51,0.026,83,0.549,158,1.924,212,2.709,280,2.248,303,3.233,323,2.461,348,3.882,349,3.882,428,3.882,429,5.539,430,4.642]],["title/modules/FooModule.html",[375,1.223,431,1.896]],["body/modules/FooModule.html",[3,0.512,4,0.512,5,0.399,13,0.031,15,0.702,17,0.77,21,0.454,50,0.025,51,0.025,83,0.512,375,2.162,376,3.65,377,1.921,378,1.921,379,2.524,380,2.524,381,2.094,382,2.524,383,2.524,388,3.097,389,2.524,390,2.094,392,3.439,431,3.65,432,3.617,433,4.324,434,4.324,435,4.324]],["title/injectables/LoggingInterceptor.html",[52,0.961,436,2.366]],["body/injectables/LoggingInterceptor.html",[3,0.341,4,0.341,5,0.266,7,0.424,8,1.022,11,1.089,12,0.537,13,0.031,14,0.865,15,0.712,17,0.514,21,0.303,29,0.854,42,1.529,50,0.019,51,0.019,52,1.202,54,1.397,58,1.66,59,3.397,60,3.397,61,4.269,62,3.426,63,4.269,64,1.77,66,1.178,67,1.086,68,1.178,69,2.412,70,1.086,71,3.933,72,3.397,74,2.101,76,2.706,77,1.684,78,2.412,80,1.869,83,0.341,84,1.684,85,2.281,86,2.412,87,1.281,88,2.412,90,2.101,91,2.101,95,2.959,96,2.959,114,1.804,115,1.967,122,2.101,123,1.869,127,3.397,158,1.411,206,2.101,207,2.154,217,3.933,227,2.412,235,2.412,436,2.959,437,2.412,438,4.702,439,2.885,440,4.062,441,2.885,442,4.062,443,2.885,444,2.885,445,4.062,446,2.412,447,2.885,448,2.885,449,2.885,450,2.885,451,2.885,452,2.885,453,2.885,454,2.885,455,2.885,456,2.885,457,2.885,458,2.885,459,2.885,460,2.885,461,2.885,462,3.397,463,5.105,464,2.885,465,4.062,466,4.062,467,4.062,468,2.412,469,4.062,470,2.885,471,2.885,472,2.885,473,2.885]],["title/modules/PersistenceModule.html",[375,1.223,387,1.722]],["body/modules/PersistenceModule.html",[3,0.399,4,0.399,5,0.311,13,0.031,15,0.804,17,0.6,21,0.354,46,0.848,50,0.021,51,0.021,83,0.399,85,1.376,93,2.835,117,2.929,119,2.454,123,2.183,134,2.6,194,2.183,254,1.966,375,1.92,377,1.496,378,1.496,379,1.966,380,1.966,381,1.631,382,2.977,383,2.977,387,3.326,388,2.638,389,1.966,390,1.631,392,2.183,400,3.06,474,2.817,475,2.817,476,2.817,477,2.454,478,3.368,479,3.78,480,2.817,481,2.817,482,3.368,483,3.368,484,3.368,485,3.368,486,3.368,487,2.929,488,3.293,489,2.817,490,2.817,491,3.368,492,3.368,493,3.368,494,3.368,495,3.368,496,2.183,497,2.817,498,2.454]],["title/injectables/PersistenceService.html",[52,0.961,400,1.573]],["body/injectables/PersistenceService.html",[3,0.171,4,0.171,5,0.133,7,0.213,11,1.213,12,0.771,13,0.032,14,1.114,15,0.592,17,0.258,18,0.464,19,0.395,20,0.429,21,0.152,22,0.9,23,1.911,24,1.062,25,0.98,28,2.078,29,1.479,30,2.007,31,1.449,41,0.831,42,0.545,50,0.011,51,0.011,52,0.708,54,0.701,58,0.977,64,2.04,66,2.381,67,2.04,68,2.214,70,2.007,76,1.268,82,0.938,83,0.171,85,0.592,87,2.569,93,2.167,95,2.082,96,1.268,98,2.071,101,1.55,107,3.535,113,2.226,114,0.643,115,0.701,121,1.055,134,1.878,137,1.783,138,1.55,139,2.555,140,1.396,141,2,142,2,143,1.55,152,2,153,4.907,154,3.408,156,2.266,157,2,158,1.882,160,2,161,3.912,164,1.211,165,2.612,166,2.299,167,2.48,169,2,170,3.742,172,2,174,3.537,175,2,176,2.967,178,2,180,1.055,181,1.055,182,1.211,183,0.768,191,1.055,192,1.211,193,1.211,194,0.938,206,2.584,207,1.62,209,1.742,247,1.211,288,1.211,309,1.211,400,1.158,446,1.211,499,1.211,500,2.392,501,2.392,502,2.392,503,2,504,2.392,505,1.448,506,1.448,507,2.392,508,3.548,509,1.448,510,1.448,511,2.392,512,1.448,513,1.448,514,2.392,515,1.448,516,1.448,517,1.448,518,1.448,519,2.392,520,1.448,521,1.448,522,1.448,523,1.448,524,2.392,525,1.448,526,1.448,527,1.448,528,1.448,529,1.448,530,1.448,531,1.448,532,1.448,533,1.448,534,2.392,535,2.392,536,1.448,537,2,538,1.448,539,1.448,540,1.448,541,1.448,542,1.448,543,1.448,544,1.448,545,2.392,546,1.448,547,3.548,548,1.448,549,2.392,550,1.448,551,2.392,552,1.448,553,1.448,554,1.448,555,1.448,556,2.392,557,2.392,558,3.055,559,1.448,560,1.448,561,1.448,562,1.448,563,1.448,564,1.448]],["title/modules/RootModule.html",[375,1.223,565,2.105]],["body/modules/RootModule.html",[3,0.466,4,0.466,5,0.363,13,0.031,15,0.79,17,0.701,21,0.413,46,0.99,50,0.024,51,0.024,83,0.466,123,2.549,375,2.071,377,1.748,378,1.748,379,2.296,380,2.296,381,1.905,382,2.296,383,2.296,387,3.238,388,2.92,389,2.296,390,1.905,392,3.241,394,3.29,431,3.565,481,4.183,498,2.866,565,4.07,566,3.29,567,3.934,568,3.934,569,3.934,570,3.934,571,2.866,572,3.934,573,3.934]],["title/coverage.html",[574,3.688]],["body/coverage.html",[0,1.284,1,1.141,5,0.237,6,2.647,12,0.71,13,0.031,22,0.967,31,1.049,33,0.892,34,1.049,35,0.967,36,1.049,37,1.049,39,1.141,43,0.967,44,1.141,47,0.823,50,0.018,51,0.018,52,1.589,53,1.871,55,2.148,56,2.148,57,2.148,83,0.573,93,1.244,94,2.148,134,1.141,135,2.148,156,1.244,167,1.982,205,5.494,207,1.362,211,1.871,213,2.148,214,2.148,215,2.148,253,1.141,255,2.148,267,1.499,269,1.499,270,1.664,272,2.723,274,1.362,280,1.244,303,1.499,312,1.362,346,2.148,350,2.148,374,2.148,381,1.244,396,2.723,400,1.244,428,2.148,436,1.871,437,2.148,477,1.871,488,1.871,496,1.664,499,2.148,574,2.148,575,2.148,576,2.568,577,2.568,578,6.359,579,3.738,580,5.144,581,3.738,582,3.738,583,3.126,584,3.126,585,3.126,586,5.882,587,2.148,588,5.144,589,3.126,590,3.686,591,2.148,592,2.148,593,2.148,594,2.568,595,2.568,596,2.568,597,2.568,598,2.568,599,3.126,600,3.126,601,3.126,602,3.126,603,2.148,604,2.148,605,2.148,606,2.148,607,2.568,608,2.568]],["title/dependencies.html",[378,1.733,609,2.278]],["body/dependencies.html",[13,0.031,17,0.733,19,1.123,20,1.217,32,2.102,50,0.024,51,0.024,74,2.997,77,2.401,83,0.609,117,3.638,119,2.997,183,2.181,323,2.181,370,2.997,378,1.827,480,3.44,487,3.334,496,2.665,571,2.997,610,4.113,611,5.614,612,4.113,613,4.113,614,4.113,615,4.113,616,4.113,617,4.113,618,4.113,619,4.113,620,4.113,621,4.113,622,4.113,623,4.113,624,4.113,625,4.113,626,4.113,627,4.113,628,4.113,629,4.113,630,4.113]],["title/miscellaneous/functions.html",[631,1.444,632,3.262]],["body/miscellaneous/functions.html",[7,0.644,9,2.186,11,1.453,12,0.708,13,0.03,43,2.175,50,0.025,51,0.025,66,2.186,67,2.015,68,2.186,70,2.015,381,2.797,589,3.667,591,4.476,592,4.476,593,3.667,631,2.324,632,3.667,633,4.384,634,5.351,635,4.384,636,4.384,637,3.194]],["title/index.html",[7,0.4,638,2.278,639,2.278]],["body/index.html",[0,0.955,5,0.173,9,1.204,10,0.833,11,1.281,12,0.545,13,0.031,14,0.954,16,1.684,18,1.437,19,1.126,20,0.555,21,0.433,23,1.486,25,1.167,27,0.833,29,0.872,30,1.552,32,1.684,33,1.023,34,1.486,35,1.109,40,1.204,41,1.023,42,1.552,43,0.706,45,1.309,46,1.038,47,1.322,48,1.427,49,1.427,50,0.014,51,0.014,58,1.204,62,2.146,70,0.706,76,0.994,80,3.082,81,1.568,82,1.215,83,0.222,93,0.908,100,1.568,122,2.146,134,0.833,137,1.095,140,1.095,154,2.651,165,2.124,183,0.994,191,1.366,232,2.464,238,1.568,239,2.464,246,1.568,253,1.831,269,1.095,278,1.215,298,2.464,310,2.464,311,2.464,323,0.994,325,1.366,352,1.568,353,1.568,362,2.464,370,1.366,375,0.706,377,0.833,378,0.833,390,0.908,400,2.17,411,1.366,412,3.043,415,1.568,416,1.568,418,1.568,420,2.464,421,1.568,462,3.043,468,1.568,487,1.909,503,1.568,537,2.464,571,1.366,590,1.568,637,1.366,640,2.464,641,2.464,642,1.875,643,1.875,644,1.875,645,1.875,646,1.875,647,1.875,648,1.875,649,1.875,650,1.875,651,1.875,652,4.756,653,1.875,654,3.638,655,1.875,656,2.946,657,1.875,658,1.875,659,4.123,660,1.568,661,1.875,662,4.756,663,2.946,664,1.568,665,1.875,666,1.875,667,1.875,668,1.875,669,1.875,670,1.875,671,1.875,672,2.946,673,1.875,674,1.875,675,1.875,676,1.875,677,1.875,678,2.464,679,1.875,680,1.875,681,2.946,682,1.875,683,2.946,684,1.875,685,2.946,686,1.875,687,1.875,688,3.448,689,2.946,690,1.875,691,2.946,692,1.568,693,1.875,694,4.123,695,1.875,696,1.875,697,1.875,698,1.875,699,1.875,700,2.946,701,1.875,702,1.875,703,2.946,704,1.875,705,3.638,706,1.875,707,1.568,708,1.875,709,1.875,710,1.875,711,1.875,712,1.875,713,2.946,714,1.875,715,4.975,716,1.875,717,1.875,718,1.875,719,1.875,720,1.875,721,1.875,722,1.875,723,1.875,724,1.875,725,1.875,726,1.875,727,2.946,728,1.875,729,1.875,730,4.481,731,2.946,732,1.875,733,2.946,734,3.638,735,1.875,736,1.875,737,1.875,738,1.875,739,1.875,740,1.875,741,1.875,742,2.946,743,1.875,744,1.875,745,1.875,746,1.875,747,1.875,748,1.875,749,2.946,750,1.875,751,1.875,752,1.875,753,1.875,754,2.946,755,1.875,756,1.875,757,1.875,758,1.875,759,1.875,760,1.875,761,1.875,762,1.875,763,1.875,764,1.875,765,1.875,766,1.875,767,1.875,768,1.875,769,1.875,770,2.946,771,1.875,772,2.946,773,2.946,774,1.875,775,1.875,776,1.875,777,1.875,778,1.875,779,1.875,780,1.875,781,1.875,782,1.875,783,1.875,784,2.946,785,1.875]],["title/license.html",[638,2.278,639,2.278,786,1.984]],["body/license.html",[13,0.023,50,0.023,51,0.023,77,2.181,358,3.125,390,1.81,575,3.125,637,2.722,660,3.125,678,3.125,707,3.125,786,2.722,787,4.047,788,5.368,789,3.737,790,3.737,791,3.737,792,4.84,793,3.737,794,3.737,795,3.737,796,3.737,797,3.737,798,3.737,799,4.84,800,6.281,801,3.737,802,3.737,803,3.737,804,5.368,805,3.737,806,4.84,807,3.737,808,3.737,809,4.84,810,3.737,811,3.737,812,3.737,813,3.737,814,3.737,815,3.737,816,3.737,817,4.84,818,3.737,819,3.737,820,3.737,821,3.737,822,3.737,823,3.737,824,4.84,825,4.84,826,3.737,827,3.737,828,3.737,829,3.737,830,3.737,831,3.737,832,3.737,833,3.737,834,3.737,835,3.737,836,3.737,837,3.737,838,3.737,839,3.737,840,3.737,841,3.737,842,3.737,843,3.737,844,3.737,845,3.737,846,3.737,847,3.737,848,3.737,849,3.737,850,3.737]],["title/modules.html",[377,1.959]],["body/modules.html",[13,0.027,50,0.027,51,0.027,376,2.77,377,2.108,387,2.516,431,2.77,565,3.076,851,6.176,852,6.176,853,6.176,854,6.176]],["title/overview.html",[855,3.688]],["body/overview.html",[2,1.675,13,0.031,50,0.023,51,0.023,54,1.826,93,2.611,134,2.53,212,2.201,254,2.201,269,2.201,312,2.858,371,4.071,375,1.419,376,3.672,377,1.675,378,1.675,379,2.201,380,2.201,381,1.826,382,2.201,383,2.201,384,3.153,385,3.153,386,3.153,387,3.387,388,2.841,389,2.201,390,1.826,400,2.976,431,3.442,432,3.153,474,3.153,475,3.153,476,3.153,565,3.913,566,3.153,855,3.153,856,4.868,857,3.77,858,3.77]],["title/properties.html",[8,0.982,609,2.278]],["body/properties.html",[8,1.181,13,0.031,19,1.523,50,0.026,51,0.026,185,3.925,278,3.041,325,3.419,640,3.925,641,4.663,664,3.925,786,3.419,787,3.925,859,4.694,860,4.694,861,4.694,862,4.694,863,4.694,864,4.694,865,4.694]],["title/miscellaneous/typealiases.html",[631,1.444,866,3.901]],["body/miscellaneous/typealiases.html",[6,2.039,7,0.674,12,0.78,13,0.029,22,2.072,31,2.248,33,1.911,34,2.408,35,1.729,36,1.876,37,1.876,43,2.072,50,0.026,51,0.026,631,2.434,867,4.591,868,6.247,869,5.503]],["title/miscellaneous/variables.html",[631,1.444,870,3.262]],["body/miscellaneous/variables.html",[7,0.422,11,0.665,12,0.711,13,0.032,41,1.407,46,1.403,47,1.298,50,0.019,51,0.019,87,2.263,114,2.677,115,2.919,117,2.624,158,1.769,167,2.955,194,1.861,253,1.275,254,2.364,256,3.04,257,3.04,258,3.04,272,2.092,274,1.522,372,3.387,373,3.387,396,2.092,409,3.387,410,3.387,411,2.95,477,2.092,479,2.401,487,2.624,488,2.95,489,2.401,490,2.401,496,3.301,497,2.401,498,2.092,583,2.401,584,2.401,585,3.923,587,3.387,599,2.401,600,4.26,601,2.401,602,3.923,603,3.387,604,2.401,605,3.387,606,3.387,631,1.522,688,2.401,692,2.401,870,2.401,871,4.049,872,4.049,873,4.049,874,2.871,875,2.871,876,2.871,877,2.871,878,2.871,879,2.871,880,2.871,881,2.871,882,2.871,883,2.871,884,2.871,885,2.871,886,2.871,887,2.871,888,2.871,889,2.871,890,2.871,891,2.871,892,2.871,893,4.049,894,2.871]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"injectables/APIResponseInterceptor.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"injectables/CachingService.html":{},"injectables/DatabaseService.html":{},"classes/DefaultExceptionFilter.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"classes/ExampleCreateDTO.html":{},"classes/ExampleGetDTO.html":{},"interfaces/ExampleInterface.html":{},"modules/ExampleModule.html":{},"injectables/ExampleService.html":{},"classes/ExampleUpdateDTO.html":{},"modules/FooModule.html":{},"injectables/LoggingInterceptor.html":{},"modules/PersistenceModule.html":{},"injectables/PersistenceService.html":{},"modules/RootModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":205,"title":{},"body":{"injectables/DatabaseService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":859,"title":{},"body":{"properties.html":{}}}],["0.1",{"_index":326,"title":{},"body":{"controllers/ExampleController.html":{}}}],["0.14.1",{"_index":621,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":628,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":630,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":620,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":578,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":597,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":598,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":581,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":580,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":582,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":579,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":594,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":596,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":595,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":371,"title":{},"body":{"classes/ExampleGetDTO.html":{},"overview.html":{}}}],["10.0.0",{"_index":611,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":616,"title":{},"body":{"dependencies.html":{}}}],["1})@isnumber",{"_index":356,"title":{},"body":{"classes/ExampleGetDTO.html":{}}}],["2.2.2",{"_index":610,"title":{},"body":{"dependencies.html":{}}}],["3.0.1",{"_index":618,"title":{},"body":{"dependencies.html":{}}}],["3.11.3",{"_index":623,"title":{},"body":{"dependencies.html":{}}}],["3.2.3",{"_index":612,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":856,"title":{},"body":{"overview.html":{}}}],["4.7.0",{"_index":625,"title":{},"body":{"dependencies.html":{}}}],["5.7.6",{"_index":617,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":857,"title":{},"body":{"overview.html":{}}}],["7",{"_index":858,"title":{},"body":{"overview.html":{}}}],["7.4.2",{"_index":615,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":629,"title":{},"body":{"dependencies.html":{}}}],["9.1.2",{"_index":624,"title":{},"body":{"dependencies.html":{}}}],["__dirname",{"_index":493,"title":{},"body":{"modules/PersistenceModule.html":{}}}],["_defaultttl",{"_index":97,"title":{},"body":{"injectables/CachingService.html":{}}}],["_dev",{"_index":438,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["_fetch",{"_index":500,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["_fetch(query",{"_index":507,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["_logger",{"_index":217,"title":{},"body":{"classes/DefaultExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["_paginateconfig",{"_index":397,"title":{},"body":{"injectables/ExampleService.html":{}}}],["aboukhadijeh",{"_index":791,"title":{},"body":{"license.html":{}}}],["above",{"_index":823,"title":{},"body":{"license.html":{}}}],["abstracted",{"_index":737,"title":{},"body":{"index.html":{}}}],["according",{"_index":414,"title":{},"body":{"injectables/ExampleService.html":{}}}],["action",{"_index":844,"title":{},"body":{"license.html":{}}}],["active",{"_index":359,"title":{},"body":{"classes/ExampleGetDTO.html":{}}}],["additional",{"_index":757,"title":{},"body":{"index.html":{}}}],["aethon",{"_index":640,"title":{},"body":{"index.html":{},"properties.html":{}}}],["alias",{"_index":588,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":867,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["and/or",{"_index":815,"title":{},"body":{"license.html":{}}}],["api",{"_index":652,"title":{},"body":{"index.html":{}}}],["apibody",{"_index":319,"title":{},"body":{"controllers/ExampleController.html":{}}}],["apierror",{"_index":1,"title":{"interfaces/APIError.html":{}},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"coverage.html":{}}}],["apiokpaginatedresponse",{"_index":317,"title":{},"body":{"controllers/ExampleController.html":{}}}],["apiokpaginatedresponse(examplegetdto",{"_index":329,"title":{},"body":{"controllers/ExampleController.html":{}}}],["apiokresponse",{"_index":320,"title":{},"body":{"controllers/ExampleController.html":{}}}],["apipaginationquery",{"_index":318,"title":{},"body":{"controllers/ExampleController.html":{}}}],["apipaginationquery(paginateconfig",{"_index":328,"title":{},"body":{"controllers/ExampleController.html":{}}}],["apiparam",{"_index":321,"title":{},"body":{"controllers/ExampleController.html":{}}}],["apiproperty",{"_index":365,"title":{},"body":{"classes/ExampleGetDTO.html":{}}}],["apiproperty({name",{"_index":351,"title":{},"body":{"classes/ExampleGetDTO.html":{}}}],["apiresponse",{"_index":33,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"injectables/APIResponseInterceptor.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"classes/DefaultExceptionFilter.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["apiresponsedata",{"_index":34,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["apiresponseerror",{"_index":35,"title":{"interfaces/APIResponseError.html":{}},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["apiresponseinterceptor",{"_index":53,"title":{"injectables/APIResponseInterceptor.html":{}},"body":{"injectables/APIResponseInterceptor.html":{},"coverage.html":{}}}],["apiresponsemeta",{"_index":39,"title":{"interfaces/APIResponseMeta.html":{}},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"coverage.html":{}}}],["apiresponseonedata",{"_index":36,"title":{"interfaces/APIResponseOneData.html":{}},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["apiresponsepaginateddata",{"_index":37,"title":{"interfaces/APIResponsePaginatedData.html":{}},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["apiresponsesuccess",{"_index":44,"title":{"interfaces/APIResponseSuccess.html":{}},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"coverage.html":{}}}],["apitags",{"_index":322,"title":{},"body":{"controllers/ExampleController.html":{}}}],["apitags(\"example",{"_index":327,"title":{},"body":{"controllers/ExampleController.html":{}}}],["applications",{"_index":649,"title":{},"body":{"index.html":{}}}],["argumentshost",{"_index":223,"title":{},"body":{"classes/DefaultExceptionFilter.html":{}}}],["arising",{"_index":848,"title":{},"body":{"license.html":{}}}],["array",{"_index":709,"title":{},"body":{"index.html":{}}}],["asc",{"_index":411,"title":{},"body":{"injectables/ExampleService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["associated",{"_index":801,"title":{},"body":{"license.html":{}}}],["async",{"_index":398,"title":{},"body":{"injectables/ExampleService.html":{}}}],["auth",{"_index":697,"title":{},"body":{"index.html":{}}}],["author",{"_index":863,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":838,"title":{},"body":{"license.html":{}}}],["back",{"_index":768,"title":{},"body":{"index.html":{}}}],["bad",{"_index":248,"title":{},"body":{"classes/DefaultExceptionFilter.html":{}}}],["base",{"_index":299,"title":{},"body":{"controllers/ExampleController.html":{}}}],["based",{"_index":659,"title":{},"body":{"index.html":{}}}],["basic",{"_index":753,"title":{},"body":{"index.html":{}}}],["before",{"_index":670,"title":{},"body":{"index.html":{}}}],["beginning",{"_index":732,"title":{},"body":{"index.html":{}}}],["being",{"_index":718,"title":{},"body":{"index.html":{}}}],["body",{"_index":308,"title":{},"body":{"controllers/ExampleController.html":{}}}],["boilerplate",{"_index":641,"title":{},"body":{"index.html":{},"properties.html":{}}}],["boolean",{"_index":25,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"injectables/DatabaseService.html":{},"entities/Example.html":{},"classes/ExampleGetDTO.html":{},"interfaces/ExampleInterface.html":{},"injectables/PersistenceService.html":{},"index.html":{}}}],["bootstrap",{"_index":381,"title":{},"body":{"modules/ExampleModule.html":{},"modules/FooModule.html":{},"modules/PersistenceModule.html":{},"modules/RootModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["bootstraping",{"_index":671,"title":{},"body":{"index.html":{}}}],["both",{"_index":736,"title":{},"body":{"index.html":{}}}],["browse",{"_index":854,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":851,"title":{},"body":{"modules.html":{}}}],["building",{"_index":645,"title":{},"body":{"index.html":{}}}],["business",{"_index":415,"title":{},"body":{"injectables/ExampleService.html":{},"index.html":{}}}],["c",{"_index":789,"title":{},"body":{"license.html":{}}}],["cachable",{"_index":563,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["cachable.data",{"_index":564,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["cache",{"_index":32,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"injectables/CachingService.html":{},"dependencies.html":{},"index.html":{}}}],["cache_manager",{"_index":118,"title":{},"body":{"injectables/CachingService.html":{}}}],["cacheable",{"_index":22,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"injectables/CachingService.html":{},"injectables/PersistenceService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["cached",{"_index":24,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"injectables/CachingService.html":{},"injectables/PersistenceService.html":{}}}],["cachemanager",{"_index":104,"title":{},"body":{"injectables/CachingService.html":{}}}],["cachemodule",{"_index":484,"title":{},"body":{"modules/PersistenceModule.html":{}}}],["cachemodule.register",{"_index":495,"title":{},"body":{"modules/PersistenceModule.html":{}}}],["cachemoduleoptions",{"_index":880,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cacheoptions",{"_index":508,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["cacheoptions.cache",{"_index":556,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["cacheoptions.cached",{"_index":557,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["cacheoptions?.ttl",{"_index":561,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["cachestrategyoptions",{"_index":31,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"injectables/PersistenceService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["caching",{"_index":694,"title":{},"body":{"index.html":{}}}],["caching.service",{"_index":527,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["cachingservice",{"_index":93,"title":{"injectables/CachingService.html":{}},"body":{"injectables/CachingService.html":{},"modules/PersistenceModule.html":{},"injectables/PersistenceService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["calculated",{"_index":457,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["call",{"_index":731,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":63,"title":{},"body":{"injectables/APIResponseInterceptor.html":{},"injectables/LoggingInterceptor.html":{}}}],["catch",{"_index":218,"title":{},"body":{"classes/DefaultExceptionFilter.html":{}}}],["catch(exception",{"_index":221,"title":{},"body":{"classes/DefaultExceptionFilter.html":{}}}],["catcherror",{"_index":444,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["catcherror((error",{"_index":470,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["charge",{"_index":796,"title":{},"body":{"license.html":{}}}],["check",{"_index":191,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/PersistenceService.html":{},"index.html":{}}}],["checkiffound",{"_index":136,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["checkiffound(result",{"_index":147,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["claim",{"_index":841,"title":{},"body":{"license.html":{}}}],["class",{"_index":83,"title":{"classes/DefaultExceptionFilter.html":{},"classes/ExampleCreateDTO.html":{},"classes/ExampleGetDTO.html":{},"classes/ExampleUpdateDTO.html":{}},"body":{"injectables/APIResponseInterceptor.html":{},"injectables/CachingService.html":{},"injectables/DatabaseService.html":{},"classes/DefaultExceptionFilter.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"classes/ExampleCreateDTO.html":{},"classes/ExampleGetDTO.html":{},"modules/ExampleModule.html":{},"injectables/ExampleService.html":{},"classes/ExampleUpdateDTO.html":{},"modules/FooModule.html":{},"injectables/LoggingInterceptor.html":{},"modules/PersistenceModule.html":{},"injectables/PersistenceService.html":{},"modules/RootModule.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["classes",{"_index":212,"title":{},"body":{"classes/DefaultExceptionFilter.html":{},"classes/ExampleCreateDTO.html":{},"classes/ExampleGetDTO.html":{},"classes/ExampleUpdateDTO.html":{},"overview.html":{}}}],["cluster_examplemodule",{"_index":384,"title":{},"body":{"modules/ExampleModule.html":{},"overview.html":{}}}],["cluster_examplemodule_imports",{"_index":386,"title":{},"body":{"modules/ExampleModule.html":{},"overview.html":{}}}],["cluster_examplemodule_providers",{"_index":385,"title":{},"body":{"modules/ExampleModule.html":{},"overview.html":{}}}],["cluster_foomodule",{"_index":432,"title":{},"body":{"modules/FooModule.html":{},"overview.html":{}}}],["cluster_foomodule_imports",{"_index":433,"title":{},"body":{"modules/FooModule.html":{}}}],["cluster_persistencemodule",{"_index":474,"title":{},"body":{"modules/PersistenceModule.html":{},"overview.html":{}}}],["cluster_persistencemodule_exports",{"_index":476,"title":{},"body":{"modules/PersistenceModule.html":{},"overview.html":{}}}],["cluster_persistencemodule_providers",{"_index":475,"title":{},"body":{"modules/PersistenceModule.html":{},"overview.html":{}}}],["cluster_rootmodule",{"_index":566,"title":{},"body":{"modules/RootModule.html":{},"overview.html":{}}}],["cluster_rootmodule_imports",{"_index":567,"title":{},"body":{"modules/RootModule.html":{}}}],["code",{"_index":239,"title":{},"body":{"classes/DefaultExceptionFilter.html":{},"index.html":{}}}],["column",{"_index":260,"title":{},"body":{"entities/Example.html":{}}}],["column({default",{"_index":264,"title":{},"body":{"entities/Example.html":{}}}],["columns",{"_index":728,"title":{},"body":{"index.html":{}}}],["common/classes/entities/**/*.entity{.ts,.js",{"_index":494,"title":{},"body":{"modules/PersistenceModule.html":{}}}],["compodoc",{"_index":684,"title":{},"body":{"index.html":{}}}],["components",{"_index":742,"title":{},"body":{"index.html":{}}}],["concatenated",{"_index":780,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":822,"title":{},"body":{"license.html":{}}}],["config",{"_index":711,"title":{},"body":{"index.html":{}}}],["configmodule",{"_index":570,"title":{},"body":{"modules/RootModule.html":{}}}],["configmodule.forroot",{"_index":572,"title":{},"body":{"modules/RootModule.html":{}}}],["configuration",{"_index":664,"title":{},"body":{"index.html":{},"properties.html":{}}}],["configuring",{"_index":673,"title":{},"body":{"index.html":{}}}],["conform",{"_index":701,"title":{},"body":{"index.html":{}}}],["connection",{"_index":849,"title":{},"body":{"license.html":{}}}],["consistent",{"_index":537,"title":{},"body":{"injectables/PersistenceService.html":{},"index.html":{}}}],["console",{"_index":450,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["const",{"_index":85,"title":{},"body":{"injectables/APIResponseInterceptor.html":{},"injectables/CachingService.html":{},"injectables/DatabaseService.html":{},"classes/DefaultExceptionFilter.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"injectables/LoggingInterceptor.html":{},"modules/PersistenceModule.html":{},"injectables/PersistenceService.html":{}}}],["constructor",{"_index":101,"title":{},"body":{"injectables/CachingService.html":{},"injectables/DatabaseService.html":{},"injectables/ExampleService.html":{},"injectables/PersistenceService.html":{}}}],["constructor(@inject(cache_manager",{"_index":124,"title":{},"body":{"injectables/CachingService.html":{}}}],["constructor(cachemanager",{"_index":102,"title":{},"body":{"injectables/CachingService.html":{}}}],["constructor(databaseservice",{"_index":505,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["constructor(datasource",{"_index":144,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["constructor(persistenceservice",{"_index":399,"title":{},"body":{"injectables/ExampleService.html":{}}}],["constructor(private",{"_index":184,"title":{},"body":{"injectables/DatabaseService.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{}}}],["contact",{"_index":767,"title":{},"body":{"index.html":{}}}],["context",{"_index":69,"title":{},"body":{"injectables/APIResponseInterceptor.html":{},"injectables/LoggingInterceptor.html":{}}}],["context.mock.ts",{"_index":605,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["context.switchtohttp().getrequest",{"_index":86,"title":{},"body":{"injectables/APIResponseInterceptor.html":{},"injectables/LoggingInterceptor.html":{}}}],["contract",{"_index":845,"title":{},"body":{"license.html":{}}}],["controller",{"_index":269,"title":{"controllers/ExampleController.html":{}},"body":{"controllers/ExampleController.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["controller({path",{"_index":324,"title":{},"body":{"controllers/ExampleController.html":{}}}],["controllers",{"_index":271,"title":{},"body":{"controllers/ExampleController.html":{},"modules/ExampleModule.html":{}}}],["conversions",{"_index":460,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["converting",{"_index":236,"title":{},"body":{"classes/DefaultExceptionFilter.html":{}}}],["copies",{"_index":817,"title":{},"body":{"license.html":{}}}],["copy",{"_index":799,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":788,"title":{},"body":{"license.html":{}}}],["core",{"_index":679,"title":{},"body":{"index.html":{}}}],["correction",{"_index":453,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["corresponding",{"_index":669,"title":{},"body":{"index.html":{}}}],["count",{"_index":723,"title":{},"body":{"index.html":{}}}],["coupling",{"_index":774,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":574,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":137,"title":{},"body":{"injectables/DatabaseService.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"injectables/PersistenceService.html":{},"index.html":{}}}],["create(@body",{"_index":336,"title":{},"body":{"controllers/ExampleController.html":{}}}],["create(createdto",{"_index":273,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{}}}],["create(entity",{"_index":152,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/PersistenceService.html":{}}}],["createdto",{"_index":276,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{}}}],["createincache",{"_index":501,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["createincache(key",{"_index":511,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["creates",{"_index":281,"title":{},"body":{"controllers/ExampleController.html":{}}}],["crud",{"_index":689,"title":{},"body":{"index.html":{}}}],["current",{"_index":734,"title":{},"body":{"index.html":{}}}],["currentpage",{"_index":719,"title":{},"body":{"index.html":{}}}],["damages",{"_index":842,"title":{},"body":{"license.html":{}}}],["data",{"_index":29,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"injectables/APIResponseInterceptor.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"injectables/CachingService.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PersistenceService.html":{},"index.html":{}}}],["data.ts",{"_index":585,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["data/example.test",{"_index":584,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":688,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["database.service",{"_index":526,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["databaseservice",{"_index":134,"title":{"injectables/DatabaseService.html":{}},"body":{"injectables/DatabaseService.html":{},"modules/ExampleModule.html":{},"modules/PersistenceModule.html":{},"injectables/PersistenceService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["datasource",{"_index":145,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["date.now",{"_index":127,"title":{},"body":{"injectables/CachingService.html":{},"injectables/LoggingInterceptor.html":{}}}],["date.now().tostring",{"_index":461,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["db",{"_index":764,"title":{},"body":{"index.html":{}}}],["dbfetch",{"_index":558,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["deal",{"_index":803,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":850,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":380,"title":{},"body":{"modules/ExampleModule.html":{},"modules/FooModule.html":{},"modules/PersistenceModule.html":{},"modules/RootModule.html":{},"overview.html":{}}}],["decorators",{"_index":259,"title":{},"body":{"entities/Example.html":{},"controllers/ExampleController.html":{},"classes/ExampleGetDTO.html":{}}}],["decoupling",{"_index":763,"title":{},"body":{"index.html":{}}}],["default",{"_index":114,"title":{},"body":{"injectables/CachingService.html":{},"injectables/DatabaseService.html":{},"classes/DefaultExceptionFilter.html":{},"entities/Example.html":{},"injectables/ExampleService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PersistenceService.html":{},"miscellaneous/variables.html":{}}}],["defaultexceptionfilter",{"_index":211,"title":{"classes/DefaultExceptionFilter.html":{}},"body":{"classes/DefaultExceptionFilter.html":{},"coverage.html":{}}}],["defaultsortby",{"_index":410,"title":{},"body":{"injectables/ExampleService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":64,"title":{},"body":{"injectables/APIResponseInterceptor.html":{},"injectables/CachingService.html":{},"injectables/DatabaseService.html":{},"classes/DefaultExceptionFilter.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"classes/ExampleGetDTO.html":{},"injectables/ExampleService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PersistenceService.html":{}}}],["delete",{"_index":98,"title":{},"body":{"injectables/CachingService.html":{},"injectables/DatabaseService.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"injectables/PersistenceService.html":{}}}],["delete(\":id",{"_index":342,"title":{},"body":{"controllers/ExampleController.html":{}}}],["delete(':id')@apiparam({name",{"_index":284,"title":{},"body":{"controllers/ExampleController.html":{}}}],["delete(@param(\"id",{"_index":344,"title":{},"body":{"controllers/ExampleController.html":{}}}],["delete(entity",{"_index":157,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/PersistenceService.html":{}}}],["delete(id",{"_index":283,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{}}}],["delete(key",{"_index":105,"title":{},"body":{"injectables/CachingService.html":{}}}],["deleted",{"_index":343,"title":{},"body":{"controllers/ExampleController.html":{}}}],["deleted.'})@apiokresponse({type",{"_index":285,"title":{},"body":{"controllers/ExampleController.html":{}}}],["deleteincache",{"_index":502,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["deleteincache(key",{"_index":514,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["deleteresult",{"_index":148,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["deletes",{"_index":287,"title":{},"body":{"controllers/ExampleController.html":{}}}],["dependencies",{"_index":378,"title":{"dependencies.html":{}},"body":{"modules/ExampleModule.html":{},"modules/FooModule.html":{},"modules/PersistenceModule.html":{},"modules/RootModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["desc",{"_index":726,"title":{},"body":{"index.html":{}}}],["description",{"_index":278,"title":{},"body":{"controllers/ExampleController.html":{},"classes/ExampleGetDTO.html":{},"index.html":{},"properties.html":{}}}],["desired",{"_index":237,"title":{},"body":{"classes/DefaultExceptionFilter.html":{}}}],["development",{"_index":451,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["dimitriou",{"_index":865,"title":{},"body":{"properties.html":{}}}],["distribute",{"_index":813,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":575,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["doe",{"_index":373,"title":{},"body":{"classes/ExampleGetDTO.html":{},"miscellaneous/variables.html":{}}}],["doe'})@isstring()@isnotempty",{"_index":363,"title":{},"body":{"classes/ExampleGetDTO.html":{}}}],["dropschema",{"_index":887,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dto",{"_index":154,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/PersistenceService.html":{},"index.html":{}}}],["dto).then((result",{"_index":196,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["dto.id",{"_index":534,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["dto?.id",{"_index":533,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["dtos",{"_index":421,"title":{},"body":{"injectables/ExampleService.html":{},"index.html":{}}}],["each",{"_index":665,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":646,"title":{},"body":{"index.html":{}}}],["elapsed",{"_index":456,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["enable",{"_index":761,"title":{},"body":{"index.html":{}}}],["end",{"_index":27,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"injectables/CachingService.html":{},"index.html":{}}}],["endpoint",{"_index":462,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"index.html":{}}}],["endpoints/example/example.module",{"_index":435,"title":{},"body":{"modules/FooModule.html":{}}}],["enforce",{"_index":770,"title":{},"body":{"index.html":{}}}],["ensure",{"_index":545,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["entities",{"_index":254,"title":{},"body":{"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/PersistenceModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entity",{"_index":156,"title":{"entities/Example.html":{}},"body":{"injectables/DatabaseService.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"classes/ExampleGetDTO.html":{},"injectables/PersistenceService.html":{},"coverage.html":{}}}],["entity.'})@apiokresponse({type",{"_index":279,"title":{},"body":{"controllers/ExampleController.html":{}}}],["entityclassorschema",{"_index":889,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entitynotfounderror",{"_index":228,"title":{},"body":{"classes/DefaultExceptionFilter.html":{}}}],["entitytarget",{"_index":153,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/PersistenceService.html":{}}}],["entry",{"_index":748,"title":{},"body":{"index.html":{}}}],["env",{"_index":122,"title":{},"body":{"injectables/CachingService.html":{},"injectables/LoggingInterceptor.html":{},"index.html":{}}}],["env().redis.ttl",{"_index":116,"title":{},"body":{"injectables/CachingService.html":{}}}],["env().root.dev",{"_index":440,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["env.dev.ts",{"_index":656,"title":{},"body":{"index.html":{}}}],["env.example.ts",{"_index":661,"title":{},"body":{"index.html":{}}}],["env.prod.ts",{"_index":658,"title":{},"body":{"index.html":{}}}],["env.test.ts",{"_index":657,"title":{},"body":{"index.html":{}}}],["env.ts",{"_index":668,"title":{},"body":{"index.html":{}}}],["env/env",{"_index":123,"title":{},"body":{"injectables/CachingService.html":{},"injectables/LoggingInterceptor.html":{},"modules/PersistenceModule.html":{},"modules/RootModule.html":{}}}],["environment",{"_index":481,"title":{},"body":{"modules/PersistenceModule.html":{},"modules/RootModule.html":{}}}],["environment().db",{"_index":492,"title":{},"body":{"modules/PersistenceModule.html":{}}}],["environment().redis.url",{"_index":497,"title":{},"body":{"modules/PersistenceModule.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":42,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"classes/DefaultExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PersistenceService.html":{},"index.html":{}}}],["error(utils.log(\"persistenceservice.createincache",{"_index":550,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["error(utils.log(\"persistenceservice.updateincache",{"_index":554,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["error.message",{"_index":473,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["errors",{"_index":235,"title":{},"body":{"classes/DefaultExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["etc",{"_index":703,"title":{},"body":{"index.html":{}}}],["event",{"_index":637,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["example",{"_index":253,"title":{"entities/Example.html":{}},"body":{"entities/Example.html":{},"controllers/ExampleController.html":{},"classes/ExampleGetDTO.html":{},"injectables/ExampleService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["example.controller",{"_index":393,"title":{},"body":{"modules/ExampleModule.html":{}}}],["example.get.dto",{"_index":348,"title":{},"body":{"classes/ExampleCreateDTO.html":{},"classes/ExampleUpdateDTO.html":{}}}],["example.service",{"_index":313,"title":{},"body":{"controllers/ExampleController.html":{},"modules/ExampleModule.html":{}}}],["examplecontroller",{"_index":270,"title":{"controllers/ExampleController.html":{}},"body":{"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"coverage.html":{}}}],["examplecreatedto",{"_index":274,"title":{"classes/ExampleCreateDTO.html":{}},"body":{"controllers/ExampleController.html":{},"classes/ExampleCreateDTO.html":{},"injectables/ExampleService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["examplegetdto",{"_index":280,"title":{"classes/ExampleGetDTO.html":{}},"body":{"controllers/ExampleController.html":{},"classes/ExampleCreateDTO.html":{},"classes/ExampleGetDTO.html":{},"injectables/ExampleService.html":{},"classes/ExampleUpdateDTO.html":{},"coverage.html":{}}}],["exampleinterface",{"_index":267,"title":{"interfaces/ExampleInterface.html":{}},"body":{"entities/Example.html":{},"classes/ExampleGetDTO.html":{},"interfaces/ExampleInterface.html":{},"coverage.html":{}}}],["examplemodule",{"_index":376,"title":{"modules/ExampleModule.html":{}},"body":{"modules/ExampleModule.html":{},"modules/FooModule.html":{},"modules.html":{},"overview.html":{}}}],["exampleservice",{"_index":312,"title":{"injectables/ExampleService.html":{}},"body":{"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"injectables/ExampleService.html":{},"coverage.html":{},"overview.html":{}}}],["exampletestdata",{"_index":587,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["exampleupdatedto",{"_index":303,"title":{"classes/ExampleUpdateDTO.html":{}},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"classes/ExampleUpdateDTO.html":{},"coverage.html":{}}}],["exception",{"_index":225,"title":{},"body":{"classes/DefaultExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":215,"title":{},"body":{"classes/DefaultExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:10",{"_index":220,"title":{},"body":{"classes/DefaultExceptionFilter.html":{}}}],["exception.filter.ts:12",{"_index":224,"title":{},"body":{"classes/DefaultExceptionFilter.html":{}}}],["exception.getstatus",{"_index":251,"title":{},"body":{"classes/DefaultExceptionFilter.html":{}}}],["exception.message",{"_index":252,"title":{},"body":{"classes/DefaultExceptionFilter.html":{}}}],["exception/default",{"_index":214,"title":{},"body":{"classes/DefaultExceptionFilter.html":{},"coverage.html":{}}}],["exceptionfilter",{"_index":216,"title":{},"body":{"classes/DefaultExceptionFilter.html":{}}}],["executioncontext",{"_index":61,"title":{},"body":{"injectables/APIResponseInterceptor.html":{},"injectables/LoggingInterceptor.html":{}}}],["exist",{"_index":553,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["existing",{"_index":288,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/PersistenceService.html":{}}}],["exists",{"_index":536,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["export",{"_index":21,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"injectables/APIResponseInterceptor.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"injectables/CachingService.html":{},"injectables/DatabaseService.html":{},"classes/DefaultExceptionFilter.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"classes/ExampleCreateDTO.html":{},"classes/ExampleGetDTO.html":{},"interfaces/ExampleInterface.html":{},"modules/ExampleModule.html":{},"injectables/ExampleService.html":{},"classes/ExampleUpdateDTO.html":{},"modules/FooModule.html":{},"injectables/LoggingInterceptor.html":{},"modules/PersistenceModule.html":{},"injectables/PersistenceService.html":{},"modules/RootModule.html":{},"index.html":{}}}],["exports",{"_index":383,"title":{},"body":{"modules/ExampleModule.html":{},"modules/FooModule.html":{},"modules/PersistenceModule.html":{},"modules/RootModule.html":{},"overview.html":{}}}],["exposes",{"_index":752,"title":{},"body":{"index.html":{}}}],["express",{"_index":77,"title":{},"body":{"injectables/APIResponseInterceptor.html":{},"classes/DefaultExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"dependencies.html":{},"license.html":{}}}],["extends",{"_index":38,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"classes/ExampleCreateDTO.html":{},"classes/ExampleUpdateDTO.html":{}}}],["extensions",{"_index":677,"title":{},"body":{"index.html":{}}}],["false",{"_index":41,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"injectables/DatabaseService.html":{},"classes/DefaultExceptionFilter.html":{},"injectables/PersistenceService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["features",{"_index":685,"title":{},"body":{"index.html":{}}}],["feross",{"_index":790,"title":{},"body":{"license.html":{}}}],["fetched",{"_index":333,"title":{},"body":{"controllers/ExampleController.html":{}}}],["fetched.'})@apiokresponse({type",{"_index":297,"title":{},"body":{"controllers/ExampleController.html":{}}}],["field",{"_index":535,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["fieldname:string",{"_index":725,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"injectables/APIResponseInterceptor.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"injectables/CachingService.html":{},"injectables/DatabaseService.html":{},"classes/DefaultExceptionFilter.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"classes/ExampleCreateDTO.html":{},"classes/ExampleGetDTO.html":{},"interfaces/ExampleInterface.html":{},"modules/ExampleModule.html":{},"injectables/ExampleService.html":{},"classes/ExampleUpdateDTO.html":{},"modules/FooModule.html":{},"injectables/LoggingInterceptor.html":{},"modules/PersistenceModule.html":{},"injectables/PersistenceService.html":{},"modules/RootModule.html":{},"coverage.html":{},"index.html":{}}}],["files",{"_index":802,"title":{},"body":{"license.html":{}}}],["filter",{"_index":232,"title":{},"body":{"classes/DefaultExceptionFilter.html":{},"index.html":{}}}],["findall",{"_index":138,"title":{},"body":{"injectables/DatabaseService.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"injectables/PersistenceService.html":{}}}],["findall(@paginate",{"_index":330,"title":{},"body":{"controllers/ExampleController.html":{}}}],["findall(entity",{"_index":160,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/PersistenceService.html":{}}}],["findall(query",{"_index":290,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{}}}],["findallpaginated",{"_index":139,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/PersistenceService.html":{}}}],["findallpaginated(entity",{"_index":164,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/PersistenceService.html":{}}}],["findone",{"_index":140,"title":{},"body":{"injectables/DatabaseService.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"injectables/PersistenceService.html":{},"index.html":{}}}],["findone(@param(\"id",{"_index":334,"title":{},"body":{"controllers/ExampleController.html":{}}}],["findone(entity",{"_index":169,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/PersistenceService.html":{}}}],["findone(id",{"_index":295,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{}}}],["findoneincache",{"_index":503,"title":{},"body":{"injectables/PersistenceService.html":{},"index.html":{}}}],["findoneincache(key",{"_index":519,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["findoneoptions",{"_index":170,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/PersistenceService.html":{}}}],["findoptions",{"_index":162,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["first",{"_index":352,"title":{},"body":{"classes/ExampleGetDTO.html":{},"index.html":{}}}],["firstname",{"_index":256,"title":{},"body":{"entities/Example.html":{},"classes/ExampleGetDTO.html":{},"interfaces/ExampleInterface.html":{},"miscellaneous/variables.html":{}}}],["fitness",{"_index":834,"title":{},"body":{"license.html":{}}}],["flow",{"_index":746,"title":{},"body":{"index.html":{}}}],["flush",{"_index":99,"title":{},"body":{"injectables/CachingService.html":{}}}],["focused",{"_index":744,"title":{},"body":{"index.html":{}}}],["following",{"_index":707,"title":{},"body":{"index.html":{},"license.html":{}}}],["foo/foo.module",{"_index":569,"title":{},"body":{"modules/RootModule.html":{}}}],["foomodule",{"_index":431,"title":{"modules/FooModule.html":{}},"body":{"modules/FooModule.html":{},"modules/RootModule.html":{},"modules.html":{},"overview.html":{}}}],["found",{"_index":209,"title":{},"body":{"injectables/DatabaseService.html":{},"classes/DefaultExceptionFilter.html":{},"injectables/PersistenceService.html":{}}}],["framework",{"_index":644,"title":{},"body":{"index.html":{}}}],["free",{"_index":795,"title":{},"body":{"license.html":{}}}],["function",{"_index":590,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["functionality",{"_index":750,"title":{},"body":{"index.html":{}}}],["functions",{"_index":632,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":820,"title":{},"body":{"license.html":{}}}],["get(\":id",{"_index":332,"title":{},"body":{"controllers/ExampleController.html":{}}}],["get(':id')@apiparam({name",{"_index":296,"title":{},"body":{"controllers/ExampleController.html":{}}}],["get()@apipaginationquery(paginateconfig)@apiokpaginatedresponse(examplegetdto",{"_index":291,"title":{},"body":{"controllers/ExampleController.html":{}}}],["get(key",{"_index":109,"title":{},"body":{"injectables/CachingService.html":{}}}],["getconfig",{"_index":600,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getimports",{"_index":603,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getkey",{"_index":591,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getkey(keybuilder",{"_index":635,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getquerybuilder",{"_index":141,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/PersistenceService.html":{}}}],["getquerybuilder(entity",{"_index":172,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/PersistenceService.html":{}}}],["getrequest",{"_index":894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getting",{"_index":638,"title":{"index.html":{},"license.html":{}},"body":{}}],["github:aethonholdings/aethon",{"_index":862,"title":{},"body":{"properties.html":{}}}],["giving",{"_index":766,"title":{},"body":{"index.html":{}}}],["global",{"_index":771,"title":{},"body":{"index.html":{}}}],["granted",{"_index":794,"title":{},"body":{"license.html":{}}}],["handling",{"_index":233,"title":{},"body":{"classes/DefaultExceptionFilter.html":{}}}],["hereby",{"_index":793,"title":{},"body":{"license.html":{}}}],["holders",{"_index":839,"title":{},"body":{"license.html":{}}}],["holdings",{"_index":650,"title":{},"body":{"index.html":{}}}],["host",{"_index":222,"title":{},"body":{"classes/DefaultExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":241,"title":{},"body":{"classes/DefaultExceptionFilter.html":{}}}],["http",{"_index":238,"title":{},"body":{"classes/DefaultExceptionFilter.html":{},"index.html":{}}}],["http://localhost:3000/api/v0.1/swagger",{"_index":675,"title":{},"body":{"index.html":{}}}],["httpargumentshost",{"_index":230,"title":{},"body":{"classes/DefaultExceptionFilter.html":{}}}],["httpexception",{"_index":180,"title":{},"body":{"injectables/DatabaseService.html":{},"classes/DefaultExceptionFilter.html":{},"injectables/PersistenceService.html":{}}}],["httpexception(\"bad",{"_index":539,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["httpexception(\"not",{"_index":208,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["httpexception(message",{"_index":249,"title":{},"body":{"classes/DefaultExceptionFilter.html":{}}}],["httphost",{"_index":240,"title":{},"body":{"classes/DefaultExceptionFilter.html":{}}}],["httphost.getrequest",{"_index":243,"title":{},"body":{"classes/DefaultExceptionFilter.html":{}}}],["httphost.getresponse",{"_index":242,"title":{},"body":{"classes/DefaultExceptionFilter.html":{}}}],["httpstatus",{"_index":181,"title":{},"body":{"injectables/DatabaseService.html":{},"classes/DefaultExceptionFilter.html":{},"injectables/PersistenceService.html":{}}}],["httpstatus.bad_request",{"_index":247,"title":{},"body":{"classes/DefaultExceptionFilter.html":{},"injectables/PersistenceService.html":{}}}],["httpstatus.internal_server_error",{"_index":244,"title":{},"body":{"classes/DefaultExceptionFilter.html":{}}}],["httpstatus.not_found",{"_index":210,"title":{},"body":{"injectables/DatabaseService.html":{},"classes/DefaultExceptionFilter.html":{}}}],["id",{"_index":158,"title":{},"body":{"injectables/DatabaseService.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"classes/ExampleCreateDTO.html":{},"classes/ExampleGetDTO.html":{},"interfaces/ExampleInterface.html":{},"injectables/ExampleService.html":{},"classes/ExampleUpdateDTO.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PersistenceService.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":576,"title":{},"body":{"coverage.html":{}}}],["implementing",{"_index":745,"title":{},"body":{"index.html":{}}}],["implements",{"_index":84,"title":{},"body":{"injectables/APIResponseInterceptor.html":{},"classes/DefaultExceptionFilter.html":{},"entities/Example.html":{},"classes/ExampleGetDTO.html":{},"injectables/LoggingInterceptor.html":{}}}],["implied",{"_index":830,"title":{},"body":{"license.html":{}}}],["import",{"_index":15,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"injectables/APIResponseInterceptor.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"injectables/CachingService.html":{},"injectables/DatabaseService.html":{},"classes/DefaultExceptionFilter.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"classes/ExampleCreateDTO.html":{},"classes/ExampleGetDTO.html":{},"modules/ExampleModule.html":{},"injectables/ExampleService.html":{},"classes/ExampleUpdateDTO.html":{},"modules/FooModule.html":{},"injectables/LoggingInterceptor.html":{},"modules/PersistenceModule.html":{},"injectables/PersistenceService.html":{},"modules/RootModule.html":{}}}],["imports",{"_index":392,"title":{},"body":{"modules/ExampleModule.html":{},"modules/FooModule.html":{},"modules/PersistenceModule.html":{},"modules/RootModule.html":{}}}],["included",{"_index":678,"title":{},"body":{"index.html":{},"license.html":{}}}],["including",{"_index":806,"title":{},"body":{"license.html":{}}}],["inconsistent",{"_index":193,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/PersistenceService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"injectables/APIResponseInterceptor.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"injectables/CachingService.html":{},"injectables/DatabaseService.html":{},"classes/DefaultExceptionFilter.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"classes/ExampleGetDTO.html":{},"interfaces/ExampleInterface.html":{},"injectables/ExampleService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PersistenceService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["inefficient",{"_index":458,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"injectables/APIResponseInterceptor.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"injectables/CachingService.html":{},"injectables/DatabaseService.html":{},"classes/DefaultExceptionFilter.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"classes/ExampleCreateDTO.html":{},"classes/ExampleGetDTO.html":{},"interfaces/ExampleInterface.html":{},"modules/ExampleModule.html":{},"injectables/ExampleService.html":{},"classes/ExampleUpdateDTO.html":{},"modules/FooModule.html":{},"injectables/LoggingInterceptor.html":{},"modules/PersistenceModule.html":{},"injectables/PersistenceService.html":{},"modules/RootModule.html":{}}}],["inject",{"_index":120,"title":{},"body":{"injectables/CachingService.html":{}}}],["injectable",{"_index":52,"title":{"injectables/APIResponseInterceptor.html":{},"injectables/CachingService.html":{},"injectables/DatabaseService.html":{},"injectables/ExampleService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PersistenceService.html":{}},"body":{"injectables/APIResponseInterceptor.html":{},"injectables/CachingService.html":{},"injectables/DatabaseService.html":{},"injectables/ExampleService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PersistenceService.html":{},"coverage.html":{}}}],["injectables",{"_index":54,"title":{},"body":{"injectables/APIResponseInterceptor.html":{},"injectables/CachingService.html":{},"injectables/DatabaseService.html":{},"injectables/ExampleService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PersistenceService.html":{},"overview.html":{}}}],["install",{"_index":655,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":92,"title":{},"body":{"injectables/APIResponseInterceptor.html":{},"classes/DefaultExceptionFilter.html":{}}}],["interact",{"_index":740,"title":{},"body":{"index.html":{}}}],["interaction",{"_index":756,"title":{},"body":{"index.html":{}}}],["interactions",{"_index":735,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":59,"title":{},"body":{"injectables/APIResponseInterceptor.html":{},"injectables/LoggingInterceptor.html":{}}}],["intercept(context",{"_index":60,"title":{},"body":{"injectables/APIResponseInterceptor.html":{},"injectables/LoggingInterceptor.html":{}}}],["interceptor",{"_index":78,"title":{},"body":{"injectables/APIResponseInterceptor.html":{},"injectables/LoggingInterceptor.html":{}}}],["intereact",{"_index":417,"title":{},"body":{"injectables/ExampleService.html":{}}}],["interface",{"_index":0,"title":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"interfaces/ExampleInterface.html":{}},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"interfaces/ExampleInterface.html":{},"coverage.html":{},"index.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"interfaces/ExampleInterface.html":{},"overview.html":{}}}],["internal",{"_index":245,"title":{},"body":{"classes/DefaultExceptionFilter.html":{}}}],["isactive",{"_index":257,"title":{},"body":{"entities/Example.html":{},"classes/ExampleGetDTO.html":{},"interfaces/ExampleInterface.html":{},"miscellaneous/variables.html":{}}}],["isboolean",{"_index":366,"title":{},"body":{"classes/ExampleGetDTO.html":{}}}],["isglobal",{"_index":498,"title":{},"body":{"modules/PersistenceModule.html":{},"modules/RootModule.html":{},"miscellaneous/variables.html":{}}}],["isnotempty",{"_index":367,"title":{},"body":{"classes/ExampleGetDTO.html":{}}}],["isnumber",{"_index":368,"title":{},"body":{"classes/ExampleGetDTO.html":{}}}],["isstring",{"_index":369,"title":{},"body":{"classes/ExampleGetDTO.html":{}}}],["items",{"_index":713,"title":{},"body":{"index.html":{}}}],["itemsperpage",{"_index":712,"title":{},"body":{"index.html":{}}}],["jane",{"_index":878,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest",{"_index":681,"title":{},"body":{"index.html":{}}}],["jest.fn().mockreturnvalue",{"_index":893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["john",{"_index":372,"title":{},"body":{"classes/ExampleGetDTO.html":{},"miscellaneous/variables.html":{}}}],["john'})@isstring()@isnotempty",{"_index":354,"title":{},"body":{"classes/ExampleGetDTO.html":{}}}],["jwt",{"_index":696,"title":{},"body":{"index.html":{}}}],["keepconnectionalive",{"_index":888,"title":{},"body":{"miscellaneous/variables.html":{}}}],["key",{"_index":23,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"injectables/CachingService.html":{},"injectables/PersistenceService.html":{},"index.html":{}}}],["keybuilder",{"_index":43,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["keyof",{"_index":48,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"index.html":{}}}],["kind",{"_index":829,"title":{},"body":{"license.html":{}}}],["konstantinos",{"_index":864,"title":{},"body":{"properties.html":{}}}],["last",{"_index":362,"title":{},"body":{"classes/ExampleGetDTO.html":{},"index.html":{}}}],["lastname",{"_index":258,"title":{},"body":{"entities/Example.html":{},"classes/ExampleGetDTO.html":{},"interfaces/ExampleInterface.html":{},"miscellaneous/variables.html":{}}}],["layer",{"_index":419,"title":{},"body":{"injectables/ExampleService.html":{}}}],["layers",{"_index":759,"title":{},"body":{"index.html":{}}}],["legend",{"_index":379,"title":{},"body":{"modules/ExampleModule.html":{},"modules/FooModule.html":{},"modules/PersistenceModule.html":{},"modules/RootModule.html":{},"overview.html":{}}}],["liability",{"_index":843,"title":{},"body":{"license.html":{}}}],["liable",{"_index":840,"title":{},"body":{"license.html":{}}}],["license",{"_index":786,"title":{"license.html":{}},"body":{"license.html":{},"properties.html":{}}}],["limitation",{"_index":807,"title":{},"body":{"license.html":{}}}],["limited",{"_index":831,"title":{},"body":{"license.html":{}}}],["link",{"_index":730,"title":{},"body":{"index.html":{}}}],["links",{"_index":729,"title":{},"body":{"index.html":{}}}],["list",{"_index":293,"title":{},"body":{"controllers/ExampleController.html":{}}}],["literal",{"_index":869,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["load",{"_index":573,"title":{},"body":{"modules/RootModule.html":{}}}],["log",{"_index":592,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["log(event",{"_index":636,"title":{},"body":{"miscellaneous/functions.html":{}}}],["logger",{"_index":227,"title":{},"body":{"classes/DefaultExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["logger(defaultexceptionfilter.name",{"_index":219,"title":{},"body":{"classes/DefaultExceptionFilter.html":{}}}],["logger(logginginterceptor.name",{"_index":442,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["logging",{"_index":692,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["logginginterceptor",{"_index":436,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["logic",{"_index":416,"title":{},"body":{"injectables/ExampleService.html":{},"index.html":{}}}],["logical",{"_index":758,"title":{},"body":{"index.html":{}}}],["logs",{"_index":448,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["ltd",{"_index":861,"title":{},"body":{"properties.html":{}}}],["made",{"_index":454,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["manager",{"_index":117,"title":{},"body":{"injectables/CachingService.html":{},"modules/PersistenceModule.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["map",{"_index":73,"title":{},"body":{"injectables/APIResponseInterceptor.html":{}}}],["map((data",{"_index":89,"title":{},"body":{"injectables/APIResponseInterceptor.html":{}}}],["matching",{"_index":51,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"injectables/APIResponseInterceptor.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"injectables/CachingService.html":{},"injectables/DatabaseService.html":{},"classes/DefaultExceptionFilter.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"classes/ExampleCreateDTO.html":{},"classes/ExampleGetDTO.html":{},"interfaces/ExampleInterface.html":{},"modules/ExampleModule.html":{},"injectables/ExampleService.html":{},"classes/ExampleUpdateDTO.html":{},"modules/FooModule.html":{},"injectables/LoggingInterceptor.html":{},"modules/PersistenceModule.html":{},"injectables/PersistenceService.html":{},"modules/RootModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":722,"title":{},"body":{"index.html":{}}}],["memory",{"_index":884,"title":{},"body":{"miscellaneous/variables.html":{}}}],["merchantability",{"_index":833,"title":{},"body":{"license.html":{}}}],["merge",{"_index":811,"title":{},"body":{"license.html":{}}}],["message",{"_index":9,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"classes/DefaultExceptionFilter.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["meta",{"_index":710,"title":{},"body":{"index.html":{}}}],["metadata",{"_index":627,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":58,"title":{},"body":{"injectables/APIResponseInterceptor.html":{},"injectables/CachingService.html":{},"injectables/DatabaseService.html":{},"classes/DefaultExceptionFilter.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PersistenceService.html":{},"index.html":{}}}],["miscellaneous",{"_index":631,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":787,"title":{},"body":{"license.html":{},"properties.html":{}}}],["mockexecutioncontext",{"_index":606,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":452,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["modify",{"_index":810,"title":{},"body":{"license.html":{}}}],["module",{"_index":375,"title":{"modules/ExampleModule.html":{},"modules/FooModule.html":{},"modules/PersistenceModule.html":{},"modules/RootModule.html":{}},"body":{"modules/ExampleModule.html":{},"modules/FooModule.html":{},"modules/PersistenceModule.html":{},"modules/RootModule.html":{},"index.html":{},"overview.html":{}}}],["modules",{"_index":377,"title":{"modules.html":{}},"body":{"modules/ExampleModule.html":{},"modules/FooModule.html":{},"modules/PersistenceModule.html":{},"modules/RootModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["mysql",{"_index":682,"title":{},"body":{"index.html":{}}}],["mysql2",{"_index":622,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":67,"title":{},"body":{"injectables/APIResponseInterceptor.html":{},"injectables/CachingService.html":{},"injectables/DatabaseService.html":{},"classes/DefaultExceptionFilter.html":{},"controllers/ExampleController.html":{},"classes/ExampleGetDTO.html":{},"injectables/ExampleService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PersistenceService.html":{},"miscellaneous/functions.html":{}}}],["needed",{"_index":773,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":72,"title":{},"body":{"injectables/APIResponseInterceptor.html":{},"injectables/LoggingInterceptor.html":{}}}],["nestjs",{"_index":19,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"injectables/APIResponseInterceptor.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"injectables/DatabaseService.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"injectables/PersistenceService.html":{},"dependencies.html":{},"index.html":{},"properties.html":{}}}],["nestjs/cache",{"_index":119,"title":{},"body":{"injectables/CachingService.html":{},"modules/PersistenceModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"injectables/APIResponseInterceptor.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"injectables/CachingService.html":{},"injectables/DatabaseService.html":{},"classes/DefaultExceptionFilter.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"injectables/ExampleService.html":{},"modules/FooModule.html":{},"injectables/LoggingInterceptor.html":{},"modules/PersistenceModule.html":{},"injectables/PersistenceService.html":{},"modules/RootModule.html":{},"dependencies.html":{}}}],["nestjs/common/interfaces",{"_index":231,"title":{},"body":{"classes/DefaultExceptionFilter.html":{}}}],["nestjs/config",{"_index":571,"title":{},"body":{"modules/RootModule.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/core",{"_index":613,"title":{},"body":{"dependencies.html":{}}}],["nestjs/paginate",{"_index":683,"title":{},"body":{"index.html":{}}}],["nestjs/platform",{"_index":614,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":323,"title":{},"body":{"controllers/ExampleController.html":{},"classes/ExampleCreateDTO.html":{},"classes/ExampleGetDTO.html":{},"classes/ExampleUpdateDTO.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/typeorm",{"_index":480,"title":{},"body":{"modules/PersistenceModule.html":{},"dependencies.html":{}}}],["new",{"_index":207,"title":{},"body":{"injectables/DatabaseService.html":{},"classes/DefaultExceptionFilter.html":{},"controllers/ExampleController.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PersistenceService.html":{},"coverage.html":{}}}],["next",{"_index":62,"title":{},"body":{"injectables/APIResponseInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"index.html":{}}}],["next.handle().pipe",{"_index":88,"title":{},"body":{"injectables/APIResponseInterceptor.html":{},"injectables/LoggingInterceptor.html":{}}}],["node.js",{"_index":643,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":837,"title":{},"body":{"license.html":{}}}],["notes",{"_index":699,"title":{},"body":{"index.html":{}}}],["notice",{"_index":824,"title":{},"body":{"license.html":{}}}],["now",{"_index":459,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["npm",{"_index":654,"title":{},"body":{"index.html":{}}}],["null",{"_index":203,"title":{},"body":{"injectables/DatabaseService.html":{},"controllers/ExampleController.html":{}}}],["number",{"_index":14,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"injectables/CachingService.html":{},"injectables/DatabaseService.html":{},"classes/DefaultExceptionFilter.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"classes/ExampleGetDTO.html":{},"interfaces/ExampleInterface.html":{},"injectables/ExampleService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PersistenceService.html":{},"index.html":{}}}],["object",{"_index":82,"title":{},"body":{"injectables/APIResponseInterceptor.html":{},"injectables/DatabaseService.html":{},"injectables/PersistenceService.html":{},"index.html":{}}}],["objectliteral",{"_index":182,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/PersistenceService.html":{}}}],["observable",{"_index":71,"title":{},"body":{"injectables/APIResponseInterceptor.html":{},"injectables/LoggingInterceptor.html":{}}}],["obtaining",{"_index":798,"title":{},"body":{"license.html":{}}}],["offers",{"_index":747,"title":{},"body":{"index.html":{}}}],["offset",{"_index":720,"title":{},"body":{"index.html":{}}}],["ok",{"_index":468,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"index.html":{}}}],["omittype",{"_index":349,"title":{},"body":{"classes/ExampleCreateDTO.html":{},"classes/ExampleUpdateDTO.html":{}}}],["omittype(examplegetdto",{"_index":347,"title":{},"body":{"classes/ExampleCreateDTO.html":{}}}],["operation",{"_index":548,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["operations",{"_index":775,"title":{},"body":{"index.html":{}}}],["optional",{"_index":68,"title":{},"body":{"injectables/APIResponseInterceptor.html":{},"injectables/CachingService.html":{},"injectables/DatabaseService.html":{},"classes/DefaultExceptionFilter.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PersistenceService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":161,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/PersistenceService.html":{}}}],["order",{"_index":760,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":847,"title":{},"body":{"license.html":{}}}],["out",{"_index":390,"title":{},"body":{"modules/ExampleModule.html":{},"modules/FooModule.html":{},"modules/PersistenceModule.html":{},"modules/RootModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["outputs",{"_index":449,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["overview",{"_index":855,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrites",{"_index":667,"title":{},"body":{"index.html":{}}}],["overwriting",{"_index":546,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["package",{"_index":609,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":715,"title":{},"body":{"index.html":{}}}],["paginate",{"_index":20,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"injectables/APIResponseInterceptor.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"injectables/DatabaseService.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"injectables/PersistenceService.html":{},"dependencies.html":{},"index.html":{}}}],["paginate(query",{"_index":188,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["paginateconfig",{"_index":167,"title":{},"body":{"injectables/DatabaseService.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"injectables/PersistenceService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paginateconfig)@apiokresponse({description",{"_index":292,"title":{},"body":{"controllers/ExampleController.html":{}}}],["paginated",{"_index":18,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"injectables/APIResponseInterceptor.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"injectables/DatabaseService.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"injectables/PersistenceService.html":{},"index.html":{}}}],["paginatequery",{"_index":166,"title":{},"body":{"injectables/DatabaseService.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"injectables/PersistenceService.html":{}}}],["pagination",{"_index":705,"title":{},"body":{"index.html":{}}}],["param",{"_index":309,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/PersistenceService.html":{}}}],["parameter",{"_index":353,"title":{},"body":{"classes/ExampleGetDTO.html":{},"index.html":{}}}],["parameters",{"_index":66,"title":{},"body":{"injectables/APIResponseInterceptor.html":{},"injectables/CachingService.html":{},"injectables/DatabaseService.html":{},"classes/DefaultExceptionFilter.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PersistenceService.html":{},"miscellaneous/functions.html":{}}}],["parseint(id",{"_index":466,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["partialtype",{"_index":430,"title":{},"body":{"classes/ExampleUpdateDTO.html":{}}}],["partialtype(omittype(examplegetdto",{"_index":429,"title":{},"body":{"classes/ExampleUpdateDTO.html":{}}}],["particular",{"_index":835,"title":{},"body":{"license.html":{}}}],["path",{"_index":47,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"injectables/APIResponseInterceptor.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"classes/DefaultExceptionFilter.html":{},"controllers/ExampleController.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["paths",{"_index":695,"title":{},"body":{"index.html":{}}}],["payload",{"_index":45,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"injectables/APIResponseInterceptor.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"index.html":{}}}],["per",{"_index":714,"title":{},"body":{"index.html":{}}}],["permission",{"_index":792,"title":{},"body":{"license.html":{}}}],["permit",{"_index":818,"title":{},"body":{"license.html":{}}}],["persistence",{"_index":418,"title":{},"body":{"injectables/ExampleService.html":{},"index.html":{}}}],["persistencemodule",{"_index":387,"title":{"modules/PersistenceModule.html":{}},"body":{"modules/ExampleModule.html":{},"modules/PersistenceModule.html":{},"modules/RootModule.html":{},"modules.html":{},"overview.html":{}}}],["persistenceservice",{"_index":400,"title":{"injectables/PersistenceService.html":{}},"body":{"injectables/ExampleService.html":{},"modules/PersistenceModule.html":{},"injectables/PersistenceService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["person",{"_index":797,"title":{},"body":{"license.html":{}}}],["persons",{"_index":819,"title":{},"body":{"license.html":{}}}],["point",{"_index":749,"title":{},"body":{"index.html":{}}}],["portions",{"_index":827,"title":{},"body":{"license.html":{}}}],["post",{"_index":310,"title":{},"body":{"controllers/ExampleController.html":{},"index.html":{}}}],["post()@apiparam({name",{"_index":275,"title":{},"body":{"controllers/ExampleController.html":{}}}],["potentially",{"_index":704,"title":{},"body":{"index.html":{}}}],["prettier",{"_index":680,"title":{},"body":{"index.html":{}}}],["previous",{"_index":733,"title":{},"body":{"index.html":{}}}],["primarygeneratedcolumn",{"_index":262,"title":{},"body":{"entities/Example.html":{}}}],["private",{"_index":95,"title":{},"body":{"injectables/CachingService.html":{},"injectables/DatabaseService.html":{},"classes/DefaultExceptionFilter.html":{},"injectables/ExampleService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PersistenceService.html":{}}}],["process",{"_index":413,"title":{},"body":{"injectables/ExampleService.html":{}}}],["progressive",{"_index":642,"title":{},"body":{"index.html":{}}}],["promise",{"_index":107,"title":{},"body":{"injectables/CachingService.html":{},"injectables/DatabaseService.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"injectables/PersistenceService.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"injectables/CachingService.html":{},"classes/DefaultExceptionFilter.html":{},"entities/Example.html":{},"classes/ExampleGetDTO.html":{},"interfaces/ExampleInterface.html":{},"injectables/ExampleService.html":{},"injectables/LoggingInterceptor.html":{},"properties.html":{}}}],["provided",{"_index":660,"title":{},"body":{"index.html":{},"license.html":{}}}],["providers",{"_index":382,"title":{},"body":{"modules/ExampleModule.html":{},"modules/FooModule.html":{},"modules/PersistenceModule.html":{},"modules/RootModule.html":{},"overview.html":{}}}],["pte",{"_index":860,"title":{},"body":{"properties.html":{}}}],["publish",{"_index":812,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":836,"title":{},"body":{"license.html":{}}}],["put",{"_index":311,"title":{},"body":{"controllers/ExampleController.html":{},"index.html":{}}}],["put(\":id",{"_index":338,"title":{},"body":{"controllers/ExampleController.html":{}}}],["put(':id')@apiparam({name",{"_index":304,"title":{},"body":{"controllers/ExampleController.html":{}}}],["query",{"_index":165,"title":{},"body":{"injectables/DatabaseService.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"injectables/PersistenceService.html":{},"index.html":{}}}],["query.getmany",{"_index":200,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["query.getrawmany",{"_index":199,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["query.then((data",{"_index":559,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["queryfailederror",{"_index":229,"title":{},"body":{"classes/DefaultExceptionFilter.html":{}}}],["raw",{"_index":176,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/PersistenceService.html":{}}}],["readonly",{"_index":96,"title":{},"body":{"injectables/CachingService.html":{},"injectables/DatabaseService.html":{},"classes/DefaultExceptionFilter.html":{},"injectables/ExampleService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PersistenceService.html":{}}}],["record",{"_index":547,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["redis",{"_index":487,"title":{},"body":{"modules/PersistenceModule.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["redisclientoptions",{"_index":486,"title":{},"body":{"modules/PersistenceModule.html":{}}}],["redisstore",{"_index":488,"title":{},"body":{"modules/PersistenceModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["reflect",{"_index":626,"title":{},"body":{"dependencies.html":{}}}],["related",{"_index":743,"title":{},"body":{"index.html":{}}}],["repo",{"_index":751,"title":{},"body":{"index.html":{}}}],["repository",{"_index":185,"title":{},"body":{"injectables/DatabaseService.html":{},"properties.html":{}}}],["repository.delete(id).then((result",{"_index":198,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["repository.findby(options",{"_index":187,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["repository.findoneorfail(options",{"_index":189,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["repository.save(dto",{"_index":190,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["repository.update(id",{"_index":195,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["request",{"_index":76,"title":{},"body":{"injectables/APIResponseInterceptor.html":{},"classes/DefaultExceptionFilter.html":{},"injectables/ExampleService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PersistenceService.html":{},"index.html":{}}}],["request.method",{"_index":91,"title":{},"body":{"injectables/APIResponseInterceptor.html":{},"classes/DefaultExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["request.url",{"_index":90,"title":{},"body":{"injectables/APIResponseInterceptor.html":{},"classes/DefaultExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["requestmethod",{"_index":16,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"injectables/APIResponseInterceptor.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"classes/DefaultExceptionFilter.html":{},"index.html":{}}}],["require(\"cache",{"_index":881,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('cache",{"_index":489,"title":{},"body":{"modules/PersistenceModule.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":277,"title":{},"body":{"controllers/ExampleController.html":{},"classes/ExampleGetDTO.html":{}}}],["reset",{"_index":389,"title":{},"body":{"modules/ExampleModule.html":{},"modules/FooModule.html":{},"modules/PersistenceModule.html":{},"modules/RootModule.html":{},"overview.html":{}}}],["response",{"_index":80,"title":{},"body":{"injectables/APIResponseInterceptor.html":{},"classes/DefaultExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"index.html":{}}}],["response.interceptor.ts",{"_index":57,"title":{},"body":{"injectables/APIResponseInterceptor.html":{},"coverage.html":{}}}],["response.interceptor.ts:10",{"_index":65,"title":{},"body":{"injectables/APIResponseInterceptor.html":{}}}],["response.status(exception.getstatus()).json",{"_index":250,"title":{},"body":{"classes/DefaultExceptionFilter.html":{}}}],["response/api",{"_index":56,"title":{},"body":{"injectables/APIResponseInterceptor.html":{},"coverage.html":{}}}],["responses",{"_index":691,"title":{},"body":{"index.html":{}}}],["rest",{"_index":651,"title":{},"body":{"index.html":{}}}],["restriction",{"_index":805,"title":{},"body":{"license.html":{}}}],["result",{"_index":151,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["result.affected",{"_index":204,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["results",{"_index":50,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"injectables/APIResponseInterceptor.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"injectables/CachingService.html":{},"injectables/DatabaseService.html":{},"classes/DefaultExceptionFilter.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"classes/ExampleCreateDTO.html":{},"classes/ExampleGetDTO.html":{},"interfaces/ExampleInterface.html":{},"modules/ExampleModule.html":{},"injectables/ExampleService.html":{},"classes/ExampleUpdateDTO.html":{},"modules/FooModule.html":{},"injectables/LoggingInterceptor.html":{},"modules/PersistenceModule.html":{},"injectables/PersistenceService.html":{},"modules/RootModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":87,"title":{},"body":{"injectables/APIResponseInterceptor.html":{},"injectables/CachingService.html":{},"injectables/DatabaseService.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PersistenceService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":70,"title":{},"body":{"injectables/APIResponseInterceptor.html":{},"injectables/CachingService.html":{},"injectables/DatabaseService.html":{},"classes/DefaultExceptionFilter.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PersistenceService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["rights",{"_index":808,"title":{},"body":{"license.html":{}}}],["root",{"_index":708,"title":{},"body":{"index.html":{}}}],["rootmodule",{"_index":565,"title":{"modules/RootModule.html":{}},"body":{"modules/RootModule.html":{},"modules.html":{},"overview.html":{}}}],["run",{"_index":662,"title":{},"body":{"index.html":{}}}],["running",{"_index":653,"title":{},"body":{"index.html":{}}}],["runquery",{"_index":142,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/PersistenceService.html":{}}}],["runquery(query",{"_index":175,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/PersistenceService.html":{}}}],["rxjs",{"_index":74,"title":{},"body":{"injectables/APIResponseInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"dependencies.html":{}}}],["safe",{"_index":538,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["scalable",{"_index":647,"title":{},"body":{"index.html":{}}}],["schema",{"_index":700,"title":{},"body":{"index.html":{}}}],["search",{"_index":727,"title":{},"body":{"index.html":{}}}],["selectquerybuilder",{"_index":174,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/PersistenceService.html":{}}}],["sell",{"_index":816,"title":{},"body":{"license.html":{}}}],["separate",{"_index":687,"title":{},"body":{"index.html":{}}}],["server",{"_index":246,"title":{},"body":{"classes/DefaultExceptionFilter.html":{},"index.html":{}}}],["service",{"_index":738,"title":{},"body":{"index.html":{}}}],["services",{"_index":412,"title":{},"body":{"injectables/ExampleService.html":{},"index.html":{}}}],["services/caching.service",{"_index":485,"title":{},"body":{"modules/PersistenceModule.html":{}}}],["services/database.service",{"_index":483,"title":{},"body":{"modules/PersistenceModule.html":{}}}],["services/persistence.service",{"_index":482,"title":{},"body":{"modules/PersistenceModule.html":{}}}],["set",{"_index":100,"title":{},"body":{"injectables/CachingService.html":{},"index.html":{}}}],["set(key",{"_index":111,"title":{},"body":{"injectables/CachingService.html":{}}}],["shall",{"_index":825,"title":{},"body":{"license.html":{}}}],["side",{"_index":648,"title":{},"body":{"index.html":{}}}],["signature",{"_index":463,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["similar",{"_index":755,"title":{},"body":{"index.html":{}}}],["single",{"_index":298,"title":{},"body":{"controllers/ExampleController.html":{},"index.html":{}}}],["smith",{"_index":879,"title":{},"body":{"miscellaneous/variables.html":{}}}],["smoother",{"_index":762,"title":{},"body":{"index.html":{}}}],["software",{"_index":800,"title":{},"body":{"license.html":{}}}],["solutions",{"_index":765,"title":{},"body":{"index.html":{}}}],["sortablecolumns",{"_index":409,"title":{},"body":{"injectables/ExampleService.html":{},"miscellaneous/variables.html":{}}}],["sortby",{"_index":724,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"injectables/APIResponseInterceptor.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"injectables/CachingService.html":{},"injectables/DatabaseService.html":{},"classes/DefaultExceptionFilter.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"classes/ExampleCreateDTO.html":{},"classes/ExampleGetDTO.html":{},"interfaces/ExampleInterface.html":{},"modules/ExampleModule.html":{},"injectables/ExampleService.html":{},"classes/ExampleUpdateDTO.html":{},"modules/FooModule.html":{},"injectables/LoggingInterceptor.html":{},"modules/PersistenceModule.html":{},"injectables/PersistenceService.html":{},"modules/RootModule.html":{}}}],["source.config.mock.ts",{"_index":602,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["specific",{"_index":776,"title":{},"body":{"index.html":{}}}],["sqlite",{"_index":883,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cache.config.mock.ts",{"_index":872,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../data",{"_index":873,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../example.controller.ts",{"_index":876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../example.service.ts",{"_index":875,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../example.test",{"_index":871,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../execution",{"_index":874,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":633,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../persistence.module.ts",{"_index":877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../types.ts",{"_index":868,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../utils.ts",{"_index":634,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/common/classes/dto/example/example.create.dto",{"_index":315,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{}}}],["src/common/classes/dto/example/example.create.dto.ts",{"_index":346,"title":{},"body":{"classes/ExampleCreateDTO.html":{},"coverage.html":{}}}],["src/common/classes/dto/example/example.get.dto",{"_index":314,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{}}}],["src/common/classes/dto/example/example.get.dto.ts",{"_index":350,"title":{},"body":{"classes/ExampleGetDTO.html":{},"coverage.html":{}}}],["src/common/classes/dto/example/example.get.dto.ts:14",{"_index":357,"title":{},"body":{"classes/ExampleGetDTO.html":{}}}],["src/common/classes/dto/example/example.get.dto.ts:25",{"_index":355,"title":{},"body":{"classes/ExampleGetDTO.html":{}}}],["src/common/classes/dto/example/example.get.dto.ts:36",{"_index":364,"title":{},"body":{"classes/ExampleGetDTO.html":{}}}],["src/common/classes/dto/example/example.get.dto.ts:46",{"_index":361,"title":{},"body":{"classes/ExampleGetDTO.html":{}}}],["src/common/classes/dto/example/example.update.dto",{"_index":316,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{}}}],["src/common/classes/dto/example/example.update.dto.ts",{"_index":428,"title":{},"body":{"classes/ExampleUpdateDTO.html":{},"coverage.html":{}}}],["src/common/classes/entities/**/*.entity.ts",{"_index":885,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/common/classes/entities/example.entity",{"_index":407,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/common/classes/entities/example.entity.ts",{"_index":255,"title":{},"body":{"entities/Example.html":{},"coverage.html":{}}}],["src/common/classes/entities/example.entity.ts:10",{"_index":261,"title":{},"body":{"entities/Example.html":{}}}],["src/common/classes/entities/example.entity.ts:13",{"_index":266,"title":{},"body":{"entities/Example.html":{}}}],["src/common/classes/entities/example.entity.ts:16",{"_index":265,"title":{},"body":{"entities/Example.html":{}}}],["src/common/classes/entities/example.entity.ts:7",{"_index":263,"title":{},"body":{"entities/Example.html":{}}}],["src/common/filters/default",{"_index":213,"title":{},"body":{"classes/DefaultExceptionFilter.html":{},"coverage.html":{}}}],["src/common/interceptors/api",{"_index":55,"title":{},"body":{"injectables/APIResponseInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/logging/logging.interceptor.ts",{"_index":437,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/logging/logging.interceptor.ts:11",{"_index":441,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/common/interceptors/logging/logging.interceptor.ts:12",{"_index":443,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/common/interceptors/logging/logging.interceptor.ts:14",{"_index":439,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/common/interfaces/example.interface",{"_index":268,"title":{},"body":{"entities/Example.html":{},"classes/ExampleGetDTO.html":{}}}],["src/common/interfaces/example.interface.ts",{"_index":374,"title":{},"body":{"interfaces/ExampleInterface.html":{},"coverage.html":{}}}],["src/common/test",{"_index":583,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/types/types",{"_index":121,"title":{},"body":{"injectables/CachingService.html":{},"classes/DefaultExceptionFilter.html":{},"injectables/PersistenceService.html":{}}}],["src/common/types/types.ts",{"_index":6,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/common/utils/utils",{"_index":528,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["src/common/utils/utils.ts",{"_index":589,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/main.ts",{"_index":593,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/foo/endpoints/example/example.controller.ts",{"_index":272,"title":{},"body":{"controllers/ExampleController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/foo/endpoints/example/example.controller.ts:20",{"_index":294,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/modules/foo/endpoints/example/example.controller.ts:32",{"_index":300,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/modules/foo/endpoints/example/example.controller.ts:44",{"_index":282,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/modules/foo/endpoints/example/example.controller.ts:61",{"_index":307,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/modules/foo/endpoints/example/example.controller.ts:73",{"_index":289,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/modules/foo/endpoints/example/example.module.ts",{"_index":391,"title":{},"body":{"modules/ExampleModule.html":{}}}],["src/modules/foo/endpoints/example/example.service.ts",{"_index":396,"title":{},"body":{"injectables/ExampleService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/foo/endpoints/example/example.service.ts:18",{"_index":401,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/modules/foo/endpoints/example/example.service.ts:22",{"_index":404,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/modules/foo/endpoints/example/example.service.ts:28",{"_index":405,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/modules/foo/endpoints/example/example.service.ts:32",{"_index":402,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/modules/foo/endpoints/example/example.service.ts:36",{"_index":406,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/modules/foo/endpoints/example/example.service.ts:40",{"_index":403,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/modules/foo/foo.module.ts",{"_index":434,"title":{},"body":{"modules/FooModule.html":{}}}],["src/modules/persistence/persistence.module",{"_index":394,"title":{},"body":{"modules/ExampleModule.html":{},"modules/RootModule.html":{}}}],["src/modules/persistence/persistence.module.ts",{"_index":477,"title":{},"body":{"modules/PersistenceModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/persistence/services/caching.service.ts",{"_index":94,"title":{},"body":{"injectables/CachingService.html":{},"coverage.html":{}}}],["src/modules/persistence/services/caching.service.ts:13",{"_index":110,"title":{},"body":{"injectables/CachingService.html":{}}}],["src/modules/persistence/services/caching.service.ts:17",{"_index":112,"title":{},"body":{"injectables/CachingService.html":{}}}],["src/modules/persistence/services/caching.service.ts:33",{"_index":106,"title":{},"body":{"injectables/CachingService.html":{}}}],["src/modules/persistence/services/caching.service.ts:37",{"_index":108,"title":{},"body":{"injectables/CachingService.html":{}}}],["src/modules/persistence/services/caching.service.ts:9",{"_index":103,"title":{},"body":{"injectables/CachingService.html":{}}}],["src/modules/persistence/services/database.service",{"_index":395,"title":{},"body":{"modules/ExampleModule.html":{}}}],["src/modules/persistence/services/database.service.ts",{"_index":135,"title":{},"body":{"injectables/DatabaseService.html":{},"coverage.html":{}}}],["src/modules/persistence/services/database.service.ts:15",{"_index":146,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/modules/persistence/services/database.service.ts:18",{"_index":163,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/modules/persistence/services/database.service.ts:23",{"_index":168,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/modules/persistence/services/database.service.ts:32",{"_index":171,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/modules/persistence/services/database.service.ts:37",{"_index":155,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/modules/persistence/services/database.service.ts:42",{"_index":179,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/modules/persistence/services/database.service.ts:50",{"_index":159,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/modules/persistence/services/database.service.ts:57",{"_index":177,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/modules/persistence/services/database.service.ts:62",{"_index":173,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/modules/persistence/services/database.service.ts:67",{"_index":150,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/modules/persistence/services/persistence.service",{"_index":408,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/modules/persistence/services/persistence.service.ts",{"_index":499,"title":{},"body":{"injectables/PersistenceService.html":{},"coverage.html":{}}}],["src/modules/persistence/services/persistence.service.ts:10",{"_index":506,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["src/modules/persistence/services/persistence.service.ts:16",{"_index":516,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["src/modules/persistence/services/persistence.service.ts:20",{"_index":517,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["src/modules/persistence/services/persistence.service.ts:28",{"_index":518,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["src/modules/persistence/services/persistence.service.ts:32",{"_index":510,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["src/modules/persistence/services/persistence.service.ts:36",{"_index":523,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["src/modules/persistence/services/persistence.service.ts:50",{"_index":513,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["src/modules/persistence/services/persistence.service.ts:54",{"_index":522,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["src/modules/persistence/services/persistence.service.ts:58",{"_index":521,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["src/modules/persistence/services/persistence.service.ts:62",{"_index":520,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["src/modules/persistence/services/persistence.service.ts:66",{"_index":512,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["src/modules/persistence/services/persistence.service.ts:74",{"_index":525,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["src/modules/persistence/services/persistence.service.ts:82",{"_index":515,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["src/modules/persistence/services/persistence.service.ts:86",{"_index":509,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["src/modules/persistence/tests/mocks/cache.config.mock.ts",{"_index":599,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/persistence/tests/mocks/data",{"_index":601,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/root/root.module.ts",{"_index":568,"title":{},"body":{"modules/RootModule.html":{}}}],["src/tests/mocks/execution",{"_index":604,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src\\common\\utils\\utils.ts",{"_index":779,"title":{},"body":{"index.html":{}}}],["standard",{"_index":81,"title":{},"body":{"injectables/APIResponseInterceptor.html":{},"index.html":{}}}],["standardised",{"_index":420,"title":{},"body":{"injectables/ExampleService.html":{},"index.html":{}}}],["start",{"_index":26,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"injectables/CachingService.html":{}}}],["start:dev",{"_index":663,"title":{},"body":{"index.html":{}}}],["start:test",{"_index":666,"title":{},"body":{"index.html":{}}}],["started",{"_index":639,"title":{"index.html":{},"license.html":{}},"body":{}}],["statements",{"_index":577,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":10,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"classes/DefaultExceptionFilter.html":{},"index.html":{}}}],["store",{"_index":496,"title":{},"body":{"modules/PersistenceModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["store\").redisstore",{"_index":882,"title":{},"body":{"miscellaneous/variables.html":{}}}],["store').redisstore",{"_index":490,"title":{},"body":{"modules/PersistenceModule.html":{},"miscellaneous/variables.html":{}}}],["strategies",{"_index":772,"title":{},"body":{"index.html":{}}}],["string",{"_index":11,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"injectables/CachingService.html":{},"classes/DefaultExceptionFilter.html":{},"entities/Example.html":{},"classes/ExampleGetDTO.html":{},"interfaces/ExampleInterface.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PersistenceService.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":781,"title":{},"body":{"index.html":{}}}],["subject",{"_index":821,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":814,"title":{},"body":{"license.html":{}}}],["submitted",{"_index":192,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/PersistenceService.html":{}}}],["substantial",{"_index":826,"title":{},"body":{"license.html":{}}}],["success",{"_index":40,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"injectables/APIResponseInterceptor.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"classes/DefaultExceptionFilter.html":{},"index.html":{}}}],["such",{"_index":754,"title":{},"body":{"index.html":{}}}],["support",{"_index":852,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":853,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":676,"title":{},"body":{"index.html":{}}}],["switchtohttp",{"_index":892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["synchronize",{"_index":886,"title":{},"body":{"miscellaneous/variables.html":{}}}],["system",{"_index":674,"title":{},"body":{"index.html":{}}}],["t",{"_index":30,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"injectables/CachingService.html":{},"injectables/DatabaseService.html":{},"injectables/PersistenceService.html":{},"index.html":{}}}],["table",{"_index":608,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":607,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":445,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["technical",{"_index":698,"title":{},"body":{"index.html":{}}}],["template",{"_index":690,"title":{},"body":{"index.html":{}}}],["test",{"_index":785,"title":{},"body":{"index.html":{}}}],["testing",{"_index":782,"title":{},"body":{"index.html":{}}}],["tests",{"_index":784,"title":{},"body":{"index.html":{}}}],["this._defaultttl",{"_index":129,"title":{},"body":{"injectables/CachingService.html":{}}}],["this._dev",{"_index":471,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["this._logger.error(utils.log(\"error",{"_index":472,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["this._logger.verbose(utils.log(\"request",{"_index":464,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["this._logger.verbose(utils.log(\"response",{"_index":467,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["this._paginateconfig",{"_index":423,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.cachemanager.del(key",{"_index":132,"title":{},"body":{"injectables/CachingService.html":{}}}],["this.cachemanager.get(key",{"_index":125,"title":{},"body":{"injectables/CachingService.html":{}}}],["this.cachemanager.reset",{"_index":133,"title":{},"body":{"injectables/CachingService.html":{}}}],["this.cachemanager.set(key",{"_index":130,"title":{},"body":{"injectables/CachingService.html":{}}}],["this.cachingservice.delete(key",{"_index":555,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["this.cachingservice.get(cacheoptions.key).then((cachable",{"_index":562,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["this.cachingservice.get(key",{"_index":544,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["this.cachingservice.get(key).then((cached",{"_index":549,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["this.cachingservice.set(cacheoptions.key",{"_index":560,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["this.cachingservice.set(key",{"_index":551,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["this.checkiffound(result",{"_index":197,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.databaseservice.create(entity",{"_index":532,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["this.databaseservice.delete(entity",{"_index":541,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["this.databaseservice.findall(entity",{"_index":529,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["this.databaseservice.findallpaginated(entity",{"_index":530,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["this.databaseservice.findone(entity",{"_index":531,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["this.databaseservice.getquerybuilder(entity",{"_index":543,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["this.databaseservice.runquery(query",{"_index":542,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["this.databaseservice.update(entity",{"_index":540,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["this.datasource.createquerybuilder",{"_index":202,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.datasource.getrepository(entity",{"_index":186,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.datasource.getrepository(entity).createquerybuilder",{"_index":201,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.exampleservice.create(createdto",{"_index":337,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.exampleservice.delete(id",{"_index":345,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.exampleservice.findall(query",{"_index":331,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.exampleservice.findone(id",{"_index":335,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.exampleservice.update(id",{"_index":341,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.persistenceservice.create(example",{"_index":425,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.persistenceservice.delete(example",{"_index":427,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.persistenceservice.findallpaginated(example",{"_index":422,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.persistenceservice.findone(example",{"_index":424,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.persistenceservice.update(example",{"_index":426,"title":{},"body":{"injectables/ExampleService.html":{}}}],["throw",{"_index":206,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PersistenceService.html":{}}}],["thus",{"_index":672,"title":{},"body":{"index.html":{}}}],["time",{"_index":455,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["timeelapsed:${timeelapsedms}ms",{"_index":469,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["timeelapsedms",{"_index":465,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["timestamp",{"_index":126,"title":{},"body":{"injectables/CachingService.html":{}}}],["tort",{"_index":846,"title":{},"body":{"license.html":{}}}],["total",{"_index":717,"title":{},"body":{"index.html":{}}}],["totalitems",{"_index":716,"title":{},"body":{"index.html":{}}}],["totalpages",{"_index":721,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":619,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":46,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"injectables/APIResponseInterceptor.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"injectables/CachingService.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"classes/ExampleGetDTO.html":{},"modules/PersistenceModule.html":{},"modules/RootModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["true})@isboolean",{"_index":360,"title":{},"body":{"classes/ExampleGetDTO.html":{}}}],["ttl",{"_index":28,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"injectables/CachingService.html":{},"injectables/PersistenceService.html":{}}}],["ttl).then",{"_index":131,"title":{},"body":{"injectables/CachingService.html":{}}}],["ttltarget",{"_index":128,"title":{},"body":{"injectables/CachingService.html":{}}}],["two",{"_index":741,"title":{},"body":{"index.html":{}}}],["type",{"_index":12,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"injectables/APIResponseInterceptor.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"injectables/CachingService.html":{},"injectables/DatabaseService.html":{},"classes/DefaultExceptionFilter.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"classes/ExampleGetDTO.html":{},"interfaces/ExampleInterface.html":{},"injectables/ExampleService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PersistenceService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":866,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":49,"title":{},"body":{"interfaces/APIError.html":{},"interfaces/APIResponseError.html":{},"interfaces/APIResponseMeta.html":{},"interfaces/APIResponseOneData.html":{},"interfaces/APIResponsePaginatedData.html":{},"interfaces/APIResponseSuccess.html":{},"index.html":{}}}],["typeorm",{"_index":183,"title":{},"body":{"injectables/DatabaseService.html":{},"classes/DefaultExceptionFilter.html":{},"entities/Example.html":{},"injectables/PersistenceService.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":478,"title":{},"body":{"modules/PersistenceModule.html":{}}}],["typeormmodule.forfeature(entities",{"_index":891,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typeormmodule.forroot",{"_index":491,"title":{},"body":{"modules/PersistenceModule.html":{}}}],["typeormmodule.forroot(getconfig",{"_index":890,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typeormmoduleoptions",{"_index":479,"title":{},"body":{"modules/PersistenceModule.html":{},"miscellaneous/variables.html":{}}}],["types/types",{"_index":75,"title":{},"body":{"injectables/APIResponseInterceptor.html":{}}}],["undefined",{"_index":286,"title":{},"body":{"controllers/ExampleController.html":{}}}],["under",{"_index":706,"title":{},"body":{"index.html":{}}}],["unhandled",{"_index":234,"title":{},"body":{"classes/DefaultExceptionFilter.html":{}}}],["unit",{"_index":783,"title":{},"body":{"index.html":{}}}],["up",{"_index":686,"title":{},"body":{"index.html":{}}}],["update",{"_index":143,"title":{},"body":{"injectables/DatabaseService.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"injectables/PersistenceService.html":{}}}],["update(@param(\"id",{"_index":340,"title":{},"body":{"controllers/ExampleController.html":{}}}],["update(entity",{"_index":178,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/PersistenceService.html":{}}}],["update(id",{"_index":301,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{}}}],["updated",{"_index":339,"title":{},"body":{"controllers/ExampleController.html":{}}}],["updated.'})@apibody({type",{"_index":305,"title":{},"body":{"controllers/ExampleController.html":{}}}],["updatedto",{"_index":302,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{}}}],["updateincache",{"_index":504,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["updateincache(key",{"_index":524,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["updateresult",{"_index":149,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["updates",{"_index":306,"title":{},"body":{"controllers/ExampleController.html":{}}}],["updating",{"_index":552,"title":{},"body":{"injectables/PersistenceService.html":{}}}],["url",{"_index":194,"title":{},"body":{"injectables/DatabaseService.html":{},"modules/PersistenceModule.html":{},"injectables/PersistenceService.html":{},"miscellaneous/variables.html":{}}}],["usage",{"_index":777,"title":{},"body":{"index.html":{}}}],["use",{"_index":809,"title":{},"body":{"license.html":{}}}],["utilised",{"_index":769,"title":{},"body":{"index.html":{}}}],["utilises",{"_index":739,"title":{},"body":{"index.html":{}}}],["utils",{"_index":446,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"injectables/PersistenceService.html":{}}}],["utils.getkey(keybuilder",{"_index":778,"title":{},"body":{"index.html":{}}}],["utils/utils",{"_index":447,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["validation",{"_index":693,"title":{},"body":{"index.html":{}}}],["validator",{"_index":370,"title":{},"body":{"classes/ExampleGetDTO.html":{},"dependencies.html":{},"index.html":{}}}],["value",{"_index":115,"title":{},"body":{"injectables/CachingService.html":{},"injectables/DatabaseService.html":{},"classes/DefaultExceptionFilter.html":{},"injectables/ExampleService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PersistenceService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":586,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":870,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":325,"title":{},"body":{"controllers/ExampleController.html":{},"index.html":{},"properties.html":{}}}],["void",{"_index":226,"title":{},"body":{"classes/DefaultExceptionFilter.html":{}}}],["warranties",{"_index":832,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":828,"title":{},"body":{"license.html":{}}}],["whereby",{"_index":702,"title":{},"body":{"index.html":{}}}],["whether",{"_index":358,"title":{},"body":{"classes/ExampleGetDTO.html":{},"license.html":{}}}],["without",{"_index":804,"title":{},"body":{"license.html":{}}}],["wraps",{"_index":79,"title":{},"body":{"injectables/APIResponseInterceptor.html":{}}}],["yes",{"_index":113,"title":{},"body":{"injectables/CachingService.html":{},"injectables/DatabaseService.html":{},"injectables/PersistenceService.html":{}}}],["zoom",{"_index":388,"title":{},"body":{"modules/ExampleModule.html":{},"modules/FooModule.html":{},"modules/PersistenceModule.html":{},"modules/RootModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/APIError.html":{"url":"interfaces/APIError.html","title":"interface - APIError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  APIError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/types/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RequestMethod } from \"@nestjs/common\";\nimport { Paginated } from \"nestjs-paginate\";\n\nexport type Cacheable = { key: string; cached: boolean; start: number; end?: number; ttl: number; data: T };\nexport type CacheStrategyOptions = { key: string; cached: boolean; cache: boolean; ttl?: number };\nexport type APIResponse = APIResponseData | APIResponseError;\nexport type APIResponseData = APIResponseOneData | APIResponsePaginatedData;\nexport interface APIResponseError extends APIResponseMeta {\n    success: false;\n    error: APIError;\n}\nexport type KeyBuilder = any[];\n\ninterface APIResponseOneData extends APIResponseSuccess {\n    paginated: false;\n    payload: T | T[];\n}\n\ninterface APIResponsePaginatedData extends APIResponseSuccess {\n    paginated: true;\n    payload: Paginated;\n}\n\ninterface APIResponseSuccess extends APIResponseMeta {\n    success: true;\n}\n\ninterface APIError {\n    status: number;\n    message: string;\n}\n\ninterface APIResponseMeta {\n    path: string;\n    requestMethod: keyof typeof RequestMethod;\n    success: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/APIResponseError.html":{"url":"interfaces/APIResponseError.html","title":"interface - APIResponseError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  APIResponseError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/types/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            APIResponseMeta\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         APIError\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         APIError\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RequestMethod } from \"@nestjs/common\";\nimport { Paginated } from \"nestjs-paginate\";\n\nexport type Cacheable = { key: string; cached: boolean; start: number; end?: number; ttl: number; data: T };\nexport type CacheStrategyOptions = { key: string; cached: boolean; cache: boolean; ttl?: number };\nexport type APIResponse = APIResponseData | APIResponseError;\nexport type APIResponseData = APIResponseOneData | APIResponsePaginatedData;\nexport interface APIResponseError extends APIResponseMeta {\n    success: false;\n    error: APIError;\n}\nexport type KeyBuilder = any[];\n\ninterface APIResponseOneData extends APIResponseSuccess {\n    paginated: false;\n    payload: T | T[];\n}\n\ninterface APIResponsePaginatedData extends APIResponseSuccess {\n    paginated: true;\n    payload: Paginated;\n}\n\ninterface APIResponseSuccess extends APIResponseMeta {\n    success: true;\n}\n\ninterface APIError {\n    status: number;\n    message: string;\n}\n\ninterface APIResponseMeta {\n    path: string;\n    requestMethod: keyof typeof RequestMethod;\n    success: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/APIResponseInterceptor.html":{"url":"injectables/APIResponseInterceptor.html","title":"injectable - APIResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  APIResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/api-response/api-response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/api-response/api-response.interceptor.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CallHandler, ExecutionContext, Injectable, NestInterceptor } from \"@nestjs/common\";\nimport { map, Observable } from \"rxjs\";\nimport { APIResponse } from \"../../types/types\";\nimport { Paginated } from \"nestjs-paginate\";\nimport { Request } from \"express\";\n\n// Interceptor that wraps the response data in a standard APIResponse object\n@Injectable()\nexport class APIResponseInterceptor implements NestInterceptor {\n    intercept(context: ExecutionContext, next: CallHandler): Observable> {\n        const request: Request = context.switchToHttp().getRequest();\n        return next.handle().pipe(\n            map((data: any) => {\n                return {\n                    success: true,\n                    path: request.url,\n                    requestMethod: request.method,\n                    paginated: data instanceof Paginated,\n                    payload: data\n                } as APIResponse;\n            })\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/APIResponseMeta.html":{"url":"interfaces/APIResponseMeta.html","title":"interface - APIResponseMeta","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  APIResponseMeta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/types/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            requestMethod\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        requestMethod\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        requestMethod:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RequestMethod } from \"@nestjs/common\";\nimport { Paginated } from \"nestjs-paginate\";\n\nexport type Cacheable = { key: string; cached: boolean; start: number; end?: number; ttl: number; data: T };\nexport type CacheStrategyOptions = { key: string; cached: boolean; cache: boolean; ttl?: number };\nexport type APIResponse = APIResponseData | APIResponseError;\nexport type APIResponseData = APIResponseOneData | APIResponsePaginatedData;\nexport interface APIResponseError extends APIResponseMeta {\n    success: false;\n    error: APIError;\n}\nexport type KeyBuilder = any[];\n\ninterface APIResponseOneData extends APIResponseSuccess {\n    paginated: false;\n    payload: T | T[];\n}\n\ninterface APIResponsePaginatedData extends APIResponseSuccess {\n    paginated: true;\n    payload: Paginated;\n}\n\ninterface APIResponseSuccess extends APIResponseMeta {\n    success: true;\n}\n\ninterface APIError {\n    status: number;\n    message: string;\n}\n\ninterface APIResponseMeta {\n    path: string;\n    requestMethod: keyof typeof RequestMethod;\n    success: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/APIResponseOneData.html":{"url":"interfaces/APIResponseOneData.html","title":"interface - APIResponseOneData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  APIResponseOneData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/types/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            APIResponseSuccess\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            paginated\n                                        \n                                \n                                \n                                        \n                                            payload\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        paginated\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        paginated:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        payload\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        payload:     T | T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T | T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RequestMethod } from \"@nestjs/common\";\nimport { Paginated } from \"nestjs-paginate\";\n\nexport type Cacheable = { key: string; cached: boolean; start: number; end?: number; ttl: number; data: T };\nexport type CacheStrategyOptions = { key: string; cached: boolean; cache: boolean; ttl?: number };\nexport type APIResponse = APIResponseData | APIResponseError;\nexport type APIResponseData = APIResponseOneData | APIResponsePaginatedData;\nexport interface APIResponseError extends APIResponseMeta {\n    success: false;\n    error: APIError;\n}\nexport type KeyBuilder = any[];\n\ninterface APIResponseOneData extends APIResponseSuccess {\n    paginated: false;\n    payload: T | T[];\n}\n\ninterface APIResponsePaginatedData extends APIResponseSuccess {\n    paginated: true;\n    payload: Paginated;\n}\n\ninterface APIResponseSuccess extends APIResponseMeta {\n    success: true;\n}\n\ninterface APIError {\n    status: number;\n    message: string;\n}\n\ninterface APIResponseMeta {\n    path: string;\n    requestMethod: keyof typeof RequestMethod;\n    success: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/APIResponsePaginatedData.html":{"url":"interfaces/APIResponsePaginatedData.html","title":"interface - APIResponsePaginatedData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  APIResponsePaginatedData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/types/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            APIResponseSuccess\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            paginated\n                                        \n                                \n                                \n                                        \n                                            payload\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        paginated\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        paginated:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        payload\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        payload:     Paginated\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Paginated\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RequestMethod } from \"@nestjs/common\";\nimport { Paginated } from \"nestjs-paginate\";\n\nexport type Cacheable = { key: string; cached: boolean; start: number; end?: number; ttl: number; data: T };\nexport type CacheStrategyOptions = { key: string; cached: boolean; cache: boolean; ttl?: number };\nexport type APIResponse = APIResponseData | APIResponseError;\nexport type APIResponseData = APIResponseOneData | APIResponsePaginatedData;\nexport interface APIResponseError extends APIResponseMeta {\n    success: false;\n    error: APIError;\n}\nexport type KeyBuilder = any[];\n\ninterface APIResponseOneData extends APIResponseSuccess {\n    paginated: false;\n    payload: T | T[];\n}\n\ninterface APIResponsePaginatedData extends APIResponseSuccess {\n    paginated: true;\n    payload: Paginated;\n}\n\ninterface APIResponseSuccess extends APIResponseMeta {\n    success: true;\n}\n\ninterface APIError {\n    status: number;\n    message: string;\n}\n\ninterface APIResponseMeta {\n    path: string;\n    requestMethod: keyof typeof RequestMethod;\n    success: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/APIResponseSuccess.html":{"url":"interfaces/APIResponseSuccess.html","title":"interface - APIResponseSuccess","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  APIResponseSuccess\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/types/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            APIResponseMeta\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RequestMethod } from \"@nestjs/common\";\nimport { Paginated } from \"nestjs-paginate\";\n\nexport type Cacheable = { key: string; cached: boolean; start: number; end?: number; ttl: number; data: T };\nexport type CacheStrategyOptions = { key: string; cached: boolean; cache: boolean; ttl?: number };\nexport type APIResponse = APIResponseData | APIResponseError;\nexport type APIResponseData = APIResponseOneData | APIResponsePaginatedData;\nexport interface APIResponseError extends APIResponseMeta {\n    success: false;\n    error: APIError;\n}\nexport type KeyBuilder = any[];\n\ninterface APIResponseOneData extends APIResponseSuccess {\n    paginated: false;\n    payload: T | T[];\n}\n\ninterface APIResponsePaginatedData extends APIResponseSuccess {\n    paginated: true;\n    payload: Paginated;\n}\n\ninterface APIResponseSuccess extends APIResponseMeta {\n    success: true;\n}\n\ninterface APIError {\n    status: number;\n    message: string;\n}\n\ninterface APIResponseMeta {\n    path: string;\n    requestMethod: keyof typeof RequestMethod;\n    success: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CachingService.html":{"url":"injectables/CachingService.html","title":"injectable - CachingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CachingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/persistence/services/caching.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                _defaultTtl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                flush\n                            \n                            \n                                get\n                            \n                            \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cacheManager: Cache)\n                    \n                \n                        \n                            \n                                Defined in src/modules/persistence/services/caching.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/persistence/services/caching.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flush\n                        \n                    \n                \n            \n            \n                \nflush()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/persistence/services/caching.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/persistence/services/caching.service.ts:13\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        set\n                        \n                    \n                \n            \n            \n                \nset(key: string, data: T, ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/persistence/services/caching.service.ts:17\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _defaultTtl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : env().redis.ttl\n                    \n                \n                    \n                        \n                                Defined in src/modules/persistence/services/caching.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Cache } from \"cache-manager\";\nimport { CACHE_MANAGER } from \"@nestjs/cache-manager\";\nimport { Inject, Injectable } from \"@nestjs/common\";\nimport { Cacheable } from \"src/common/types/types\";\nimport env from \"env/env\";\n\n@Injectable()\nexport class CachingService {\n    private readonly _defaultTtl = env().redis.ttl;\n\n    constructor(@Inject(CACHE_MANAGER) private cacheManager: Cache) {}\n\n    get(key: string): Promise> {\n        return this.cacheManager.get(key);\n    }\n\n    set(key: string, data: T, ttl?: number): Promise> {\n        const timestamp: number = Date.now();\n        const ttlTarget: number = ttl || this._defaultTtl;\n        const cacheable: Cacheable = {\n            key: key,\n            start: timestamp,\n            end: timestamp + ttlTarget,\n            ttl: ttlTarget,\n            cached: true,\n            data: data\n        };\n        return this.cacheManager.set(key, cacheable, ttl).then(() => {\n            return cacheable;\n        });\n    }\n\n    delete(key: string): Promise {\n        return this.cacheManager.del(key);\n    }\n\n    flush(): Promise {\n        return this.cacheManager.reset();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DatabaseService.html":{"url":"injectables/DatabaseService.html","title":"injectable - DatabaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DatabaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/persistence/services/database.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkIfFound\n                            \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findAllPaginated\n                            \n                            \n                                findOne\n                            \n                            \n                                getQueryBuilder\n                            \n                            \n                                runQuery\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/modules/persistence/services/database.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        checkIfFound\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkIfFound(result: DeleteResult | UpdateResult)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/persistence/services/database.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                result\n                                            \n                                                        DeleteResult | UpdateResult\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(entity: EntityTarget, dto: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/persistence/services/database.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                        EntityTarget\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(entity: EntityTarget, id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/persistence/services/database.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                        EntityTarget\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(entity: EntityTarget, options: FindOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/persistence/services/database.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                        EntityTarget\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        FindOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllPaginated\n                        \n                    \n                \n            \n            \n                \nfindAllPaginated(entity: EntityTarget, query: PaginateQuery, paginateConfig: PaginateConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/persistence/services/database.service.ts:23\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                        EntityTarget\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                query\n                                            \n                                                        PaginateQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                paginateConfig\n                                            \n                                                        PaginateConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(entity: EntityTarget, options: FindOneOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/persistence/services/database.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                        EntityTarget\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        FindOneOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getQueryBuilder\n                        \n                    \n                \n            \n            \n                \ngetQueryBuilder(entity?: EntityTarget)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/persistence/services/database.service.ts:62\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                        EntityTarget\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SelectQueryBuilder\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        runQuery\n                        \n                    \n                \n            \n            \n                \nrunQuery(query: SelectQueryBuilder, raw: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/persistence/services/database.service.ts:57\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                        SelectQueryBuilder\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                raw\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(entity: EntityTarget, id: number, dto: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/persistence/services/database.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                        EntityTarget\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from \"@nestjs/common\";\nimport { paginate, PaginateConfig, Paginated, PaginateQuery } from \"nestjs-paginate\";\nimport {\n    DataSource,\n    DeleteResult,\n    FindOneOptions,\n    UpdateResult,\n    ObjectLiteral,\n    EntityTarget,\n    FindOptions,\n    SelectQueryBuilder\n} from \"typeorm\";\n\n@Injectable()\nexport class DatabaseService {\n    constructor(private readonly dataSource: DataSource) {}\n\n    findAll(entity: EntityTarget, options: FindOptions): Promise {\n        const repository = this.dataSource.getRepository(entity);\n        return repository.findBy(options);\n    }\n\n    findAllPaginated(\n        entity: EntityTarget,\n        query: PaginateQuery,\n        paginateConfig: PaginateConfig\n    ): Promise> {\n        const repository = this.dataSource.getRepository(entity);\n        return paginate(query, repository, paginateConfig);\n    }\n\n    findOne(entity: EntityTarget, options: FindOneOptions): Promise {\n        const repository = this.dataSource.getRepository(entity);\n        return repository.findOneOrFail(options);\n    }\n\n    create(entity: EntityTarget, dto: any): Promise {\n        const repository = this.dataSource.getRepository(entity);\n        return repository.save(dto);\n    }\n\n    update(entity: EntityTarget, id: number, dto: any): Promise {\n        // check if the object submitted has an id that is inconsistent with the id in the URL\n        const repository = this.dataSource.getRepository(entity);\n        return repository.update(id, dto).then((result: UpdateResult) => {\n            return this.checkIfFound(result);\n        });\n    }\n\n    delete(entity: EntityTarget, id: number): Promise {\n        const repository = this.dataSource.getRepository(entity);\n        return repository.delete(id).then((result: DeleteResult) => {\n            return this.checkIfFound(result);\n        });\n    }\n\n    runQuery(query: SelectQueryBuilder, raw: boolean = false): Promise {\n        if (raw) return query.getRawMany();\n        return query.getMany();\n    }\n\n    getQueryBuilder(entity?: EntityTarget): SelectQueryBuilder {\n        if (entity) return this.dataSource.getRepository(entity).createQueryBuilder();\n        return this.dataSource.createQueryBuilder();\n    }\n\n    private checkIfFound(result: DeleteResult | UpdateResult): null {\n        if (result.affected === 0) {\n            throw new HttpException(\"Not found\", HttpStatus.NOT_FOUND);\n        }\n        return null;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DefaultExceptionFilter.html":{"url":"classes/DefaultExceptionFilter.html","title":"class - DefaultExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DefaultExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/default-exception/default-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                _logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(DefaultExceptionFilter.name)\n                    \n                \n                    \n                        \n                                Defined in src/common/filters/default-exception/default-exception.filter.ts:10\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/default-exception/default-exception.filter.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, ExceptionFilter, HttpException, HttpStatus, Logger } from \"@nestjs/common\";\nimport { EntityNotFoundError, QueryFailedError } from \"typeorm\";\nimport { Response, Request } from \"express\";\nimport { APIResponse } from \"src/common/types/types\";\nimport { HttpArgumentsHost } from \"@nestjs/common/interfaces\";\n\n// filter handling unhandled errors, converting them to the desired HTTP status code\n@Catch()\nexport class DefaultExceptionFilter implements ExceptionFilter {\n    private readonly _logger = new Logger(DefaultExceptionFilter.name);\n\n    catch(exception: any, host: ArgumentsHost) {\n        const httpHost: HttpArgumentsHost = host.switchToHttp();\n        const response: Response = httpHost.getResponse();\n        const request: Request = httpHost.getRequest();\n        if (!(exception instanceof HttpException)) {\n            let status: number = HttpStatus.INTERNAL_SERVER_ERROR;\n            let message: string = \"Internal Server Error\";\n\n            if (exception instanceof EntityNotFoundError) {\n                status = HttpStatus.NOT_FOUND;\n                message = \"Not Found\";\n            }\n            if (exception instanceof QueryFailedError) {\n                status = HttpStatus.BAD_REQUEST;\n                message = \"Bad request\";\n            }\n            exception = new HttpException(message, status);\n        }\n        response.status(exception.getStatus()).json({\n            success: false,\n            path: request.url,\n            requestMethod: request.method,\n            error: {\n                status: exception.getStatus(),\n                message: exception.message\n            }\n        } as APIResponse);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Example.html":{"url":"entities/Example.html","title":"entity - Example","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Example\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/classes/entities/example.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                lastName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/classes/entities/example.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/classes/entities/example.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/classes/entities/example.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/classes/entities/example.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from \"typeorm\";\nimport { ExampleInterface } from \"src/common/interfaces/example.interface\";\n\n@Entity()\nexport class Example implements ExampleInterface {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    firstName: string;\n\n    @Column()\n    lastName: string;\n\n    @Column({ default: true })\n    isActive: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExampleController.html":{"url":"controllers/ExampleController.html","title":"controller - ExampleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExampleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/foo/endpoints/example/example.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                delete\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDTO: ExampleCreateDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiParam({name: 'createDTO', type: ExampleCreateDTO, required: true, description: 'The data to create a new example class entity.'})@ApiOkResponse({type: ExampleGetDTO, description: 'Creates and returns a new example class entity.'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/foo/endpoints/example/example.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDTO\n                                            \n                                                            ExampleCreateDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiParam({name: 'id', type: 'number', required: true, description: 'The id of the example class entity to be deleted.'})@ApiOkResponse({type: undefined, description: 'Deletes an existing example class entity.'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/foo/endpoints/example/example.controller.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(query: PaginateQuery)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiPaginationQuery(paginateConfig)@ApiOkPaginatedResponse(ExampleGetDTO, paginateConfig)@ApiOkResponse({description: 'Returns a paginated list of example class entities.'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/foo/endpoints/example/example.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                        PaginateQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiParam({name: 'id', type: Number, required: true, description: 'The id of the example class entity to be fetched.'})@ApiOkResponse({type: ExampleGetDTO, description: 'Returns a single example class entity base on their id.'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/foo/endpoints/example/example.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateDTO: ExampleUpdateDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@ApiParam({name: 'id', type: 'number', required: true, description: 'The id of the example class entity to be updated.'})@ApiBody({type: ExampleUpdateDTO, required: true, description: 'The data to update an existing example class entity.'})@ApiOkResponse({type: undefined, description: 'Updates an existing example class entity.'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/foo/endpoints/example/example.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDTO\n                                            \n                                                            ExampleUpdateDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Post, Put } from \"@nestjs/common\";\nimport { ExampleService, paginateConfig } from \"./example.service\";\nimport { ExampleGetDTO } from \"src/common/classes/dto/example/example.get.dto\";\nimport { ExampleCreateDTO } from \"src/common/classes/dto/example/example.create.dto\";\nimport { ExampleUpdateDTO } from \"src/common/classes/dto/example/example.update.dto\";\nimport { ApiOkPaginatedResponse, ApiPaginationQuery, Paginate, Paginated, PaginateQuery } from \"nestjs-paginate\";\nimport { ApiBody, ApiOkResponse, ApiParam, ApiTags } from \"@nestjs/swagger\";\n\nconst path = \"example\";\n\n@Controller({path: path, version: \"0.1\"})\n@ApiTags(\"example\")\nexport class ExampleController {\n    constructor(private exampleService: ExampleService) {}\n\n    @Get()\n    @ApiPaginationQuery(paginateConfig)\n    @ApiOkPaginatedResponse(ExampleGetDTO, paginateConfig)\n    @ApiOkResponse({ description: \"Returns a paginated list of example class entities.\" })\n    findAll(@Paginate() query: PaginateQuery): Promise> {\n        return this.exampleService.findAll(query);\n    }\n\n    @Get(\":id\")\n    @ApiParam({\n        name: \"id\",\n        type: Number,\n        required: true,\n        description: \"The id of the example class entity to be fetched.\"\n    })\n    @ApiOkResponse({ type: ExampleGetDTO, description: \"Returns a single example class entity base on their id.\" })\n    findOne(@Param(\"id\") id: number): Promise {\n        return this.exampleService.findOne(id);\n    }\n\n    @Post()\n    @ApiParam({\n        name: \"createDTO\",\n        type: ExampleCreateDTO,\n        required: true,\n        description: \"The data to create a new example class entity.\"\n    })\n    @ApiOkResponse({ type: ExampleGetDTO, description: \"Creates and returns a new example class entity.\" })\n    create(@Body() createDTO: ExampleCreateDTO): Promise {\n        return this.exampleService.create(createDTO);\n    }\n\n    @Put(\":id\")\n    @ApiParam({\n        name: \"id\",\n        type: \"number\",\n        required: true,\n        description: \"The id of the example class entity to be updated.\"\n    })\n    @ApiBody({\n        type: ExampleUpdateDTO,\n        required: true,\n        description: \"The data to update an existing example class entity.\"\n    })\n    @ApiOkResponse({ type: null, description: \"Updates an existing example class entity.\" })\n    update(@Param(\"id\") id: number, @Body() updateDTO: ExampleUpdateDTO): Promise {\n        return this.exampleService.update(id, updateDTO);\n    }\n\n    @Delete(\":id\")\n    @ApiParam({\n        name: \"id\",\n        type: \"number\",\n        required: true,\n        description: \"The id of the example class entity to be deleted.\"\n    })\n    @ApiOkResponse({ type: null, description: \"Deletes an existing example class entity.\" })\n    delete(@Param(\"id\") id: number): Promise {\n        return this.exampleService.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExampleCreateDTO.html":{"url":"classes/ExampleCreateDTO.html","title":"class - ExampleCreateDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExampleCreateDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/classes/dto/example/example.create.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            OmitType(ExampleGetDTO, [\"id\"])\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ExampleGetDTO } from \"./example.get.dto\";\nimport { OmitType } from \"@nestjs/swagger\";\n\nexport class ExampleCreateDTO extends OmitType(ExampleGetDTO, [\"id\"]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExampleGetDTO.html":{"url":"classes/ExampleGetDTO.html","title":"class - ExampleGetDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExampleGetDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/classes/dto/example/example.get.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ExampleInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                isActive\n                            \n                            \n                                    \n                                    \n                                    \n                                lastName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({name: 'firstName', type: String, required: true, description: 'A first name parameter.', example: 'John'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/classes/dto/example/example.get.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({name: 'id', type: Number, required: true, description: 'The id of the example class entity.', example: 1})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/classes/dto/example/example.get.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({name: 'isActive', type: Boolean, required: true, description: 'Whether the entity is active.', example: true})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/classes/dto/example/example.get.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({name: 'lastName', type: String, required: true, description: 'A last name parameter.', example: 'Doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/classes/dto/example/example.get.dto.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsBoolean, IsNotEmpty, IsNumber, IsString } from \"class-validator\";\nimport { ExampleInterface } from \"src/common/interfaces/example.interface\";\n\nexport class ExampleGetDTO implements ExampleInterface {\n    @ApiProperty({\n        name: \"id\",\n        type: Number,\n        required: true,\n        description: \"The id of the example class entity.\",\n        example: 1\n    })\n    @IsNumber()\n    id: number;\n\n    @ApiProperty({\n        name: \"firstName\",\n        type: String,\n        required: true,\n        description: \"A first name parameter.\",\n        example: \"John\"\n    })\n    @IsString()\n    @IsNotEmpty()\n    firstName: string;\n\n    @ApiProperty({\n        name: \"lastName\",\n        type: String,\n        required: true,\n        description: \"A last name parameter.\",\n        example: \"Doe\"\n    })\n    @IsString()\n    @IsNotEmpty()\n    lastName: string;\n\n    @ApiProperty({\n        name: \"isActive\",\n        type: Boolean,\n        required: true,\n        description: \"Whether the entity is active.\",\n        example: true\n    })\n    @IsBoolean()\n    isActive: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExampleInterface.html":{"url":"interfaces/ExampleInterface.html","title":"interface - ExampleInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ExampleInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/example.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            firstName\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            isActive\n                                        \n                                \n                                \n                                        \n                                            lastName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isActive\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isActive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ExampleInterface {\n    id: number;\n    firstName: string;\n    lastName: string;\n    isActive: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ExampleModule.html":{"url":"modules/ExampleModule.html","title":"module - ExampleModule","body":"\n                   \n\n\n\n\n    Modules\n    ExampleModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ExampleModule\n\n\n\ncluster_ExampleModule_providers\n\n\n\ncluster_ExampleModule_imports\n\n\n\n\nPersistenceModule\n\nPersistenceModule\n\n\n\nExampleModule\n\nExampleModule\n\nExampleModule -->\n\nPersistenceModule->ExampleModule\n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nExampleModule -->\n\nDatabaseService->ExampleModule\n\n\n\n\n\nExampleService\n\nExampleService\n\nExampleModule -->\n\nExampleService->ExampleModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/foo/endpoints/example/example.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DatabaseService\n                        \n                        \n                            ExampleService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ExampleController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PersistenceModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ExampleController } from \"./example.controller\";\nimport { ExampleService } from \"./example.service\";\nimport { PersistenceModule } from \"src/modules/persistence/persistence.module\";\nimport { DatabaseService } from \"src/modules/persistence/services/database.service\";\n\n@Module({\n    imports: [PersistenceModule],\n    controllers: [ExampleController],\n    providers: [ExampleService, DatabaseService]\n})\nexport class ExampleModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExampleService.html":{"url":"injectables/ExampleService.html","title":"injectable - ExampleService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExampleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/foo/endpoints/example/example.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                _paginateConfig\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(persistenceService: PersistenceService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/foo/endpoints/example/example.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        persistenceService\n                                                  \n                                                        \n                                                                        PersistenceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDTO: ExampleCreateDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/foo/endpoints/example/example.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDTO\n                                            \n                                                            ExampleCreateDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/foo/endpoints/example/example.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(query: PaginateQuery)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/foo/endpoints/example/example.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                        PaginateQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/foo/endpoints/example/example.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateDTO: ExampleUpdateDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/foo/endpoints/example/example.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDTO\n                                            \n                                                            ExampleUpdateDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _paginateConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PaginateConfig\n\n                    \n                \n                \n                    \n                        Default value : paginateConfig\n                    \n                \n                    \n                        \n                                Defined in src/modules/foo/endpoints/example/example.service.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PaginateConfig, Paginated, PaginateQuery } from \"nestjs-paginate\";\nimport { ExampleCreateDTO } from \"src/common/classes/dto/example/example.create.dto\";\nimport { ExampleGetDTO } from \"src/common/classes/dto/example/example.get.dto\";\nimport { ExampleUpdateDTO } from \"src/common/classes/dto/example/example.update.dto\";\nimport { Example } from \"src/common/classes/entities/example.entity\";\nimport { PersistenceService } from \"src/modules/persistence/services/persistence.service\";\n\nexport const paginateConfig: PaginateConfig = {\n    sortableColumns: [\"id\"],\n    defaultSortBy: [[\"id\", \"ASC\"]]\n};\n\n// services process the request data according to business logic,\n// intereact with the persistence layer, and return data as standardised DTOs\n@Injectable()\nexport class ExampleService {\n    private readonly _paginateConfig: PaginateConfig = paginateConfig;\n\n    constructor(private readonly persistenceService: PersistenceService) {}\n\n    async findAll(query: PaginateQuery): Promise> {\n        return this.persistenceService.findAllPaginated(Example, query, this._paginateConfig) as Promise\n        >;\n    }\n\n    async findOne(id: number): Promise {\n        return this.persistenceService.findOne(Example, { where: { id: id } }) as Promise;\n    }\n\n    async create(createDTO: ExampleCreateDTO): Promise {\n        return this.persistenceService.create(Example, createDTO) as Promise;\n    }\n\n    async update(id: number, updateDTO: ExampleUpdateDTO): Promise {\n        return this.persistenceService.update(Example, id, updateDTO) as Promise;\n    }\n\n    async delete(id: number): Promise {\n        return this.persistenceService.delete(Example, id) as Promise;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExampleUpdateDTO.html":{"url":"classes/ExampleUpdateDTO.html","title":"class - ExampleUpdateDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExampleUpdateDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/classes/dto/example/example.update.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(OmitType(ExampleGetDTO, [\"id\"]))\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ExampleGetDTO } from \"./example.get.dto\";\nimport { OmitType, PartialType } from \"@nestjs/swagger\";\n\nexport class ExampleUpdateDTO extends PartialType(OmitType(ExampleGetDTO, [\"id\"])) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FooModule.html":{"url":"modules/FooModule.html","title":"module - FooModule","body":"\n                   \n\n\n\n\n    Modules\n    FooModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FooModule\n\n\n\ncluster_FooModule_imports\n\n\n\n\nExampleModule\n\nExampleModule\n\n\n\nFooModule\n\nFooModule\n\nFooModule -->\n\nExampleModule->FooModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/foo/foo.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ExampleModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ExampleModule } from \"./endpoints/example/example.module\";\n\n@Module({\n    imports: [ExampleModule]\n})\nexport class FooModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/logging/logging.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                _dev\n                            \n                            \n                                    Private\n                                    Readonly\n                                _logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/logging/logging.interceptor.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _dev\n                        \n                    \n                \n            \n                \n                    \n                        Default value : env().root.dev\n                    \n                \n                    \n                        \n                                Defined in src/common/interceptors/logging/logging.interceptor.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(LoggingInterceptor.name)\n                    \n                \n                    \n                        \n                                Defined in src/common/interceptors/logging/logging.interceptor.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { CallHandler, ExecutionContext, Injectable, Logger, NestInterceptor } from \"@nestjs/common\";\nimport { Request } from \"express\";\nimport { catchError, Observable, tap } from \"rxjs\";\nimport * as utils from \"../../utils/utils\";\nimport env from \"../../../../env/env\";\n\n// Interceptor that logs the request and response data and outputs errors to the console in development mode\n// correction can be made to how the time elapsed is calculated, it is inefficient now with the type conversions\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n    private readonly _dev = env().root.dev;\n    private readonly _logger = new Logger(LoggingInterceptor.name);\n\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        const request: Request = context.switchToHttp().getRequest();\n        const id: string = Date.now().toString();\n        const endpoint: string = request.url;\n        const signature: string = `${id} {${endpoint}, ${request.method}}`;\n\n        this._logger.verbose(utils.log(\"Request\", signature));\n        return next.handle().pipe(\n            tap(() => {\n                const timeElapsedMs: number = Date.now() - parseInt(id);\n                this._logger.verbose(utils.log(\"Response (OK)\", `${signature} | timeElapsed:${timeElapsedMs}ms`));\n            }),\n            catchError((error) => {\n                const timeElapsedMs: number = Date.now() - parseInt(id);\n                if (this._dev) this._logger.error(utils.log(\"Error\", error.message));\n                this._logger.verbose(utils.log(\"Response (Error)\", `${signature} | timeElapsed:${timeElapsedMs}ms`));\n                throw error;\n            })\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PersistenceModule.html":{"url":"modules/PersistenceModule.html","title":"module - PersistenceModule","body":"\n                   \n\n\n\n\n    Modules\n    PersistenceModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PersistenceModule\n\n\n\ncluster_PersistenceModule_providers\n\n\n\ncluster_PersistenceModule_exports\n\n\n\n\nPersistenceService \n\nPersistenceService \n\n\n\nPersistenceModule\n\nPersistenceModule\n\nPersistenceService  -->\n\nPersistenceModule->PersistenceService \n\n\n\n\n\nCachingService\n\nCachingService\n\nPersistenceModule -->\n\nCachingService->PersistenceModule\n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nPersistenceModule -->\n\nDatabaseService->PersistenceModule\n\n\n\n\n\nPersistenceService\n\nPersistenceService\n\nPersistenceModule -->\n\nPersistenceService->PersistenceModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/persistence/persistence.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CachingService\n                        \n                        \n                            DatabaseService\n                        \n                        \n                            PersistenceService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PersistenceService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule, TypeOrmModuleOptions } from \"@nestjs/typeorm\";\nimport environment from \"../../../env/env\";\nimport { PersistenceService } from \"./services/persistence.service\";\nimport { DatabaseService } from \"./services/database.service\";\nimport { CacheModule } from \"@nestjs/cache-manager\";\nimport { CachingService } from './services/caching.service';\nimport { RedisClientOptions } from \"redis\";\n\nconst redisStore = require('cache-manager-redis-store').redisStore;\n\n@Module({\n    imports: [\n        TypeOrmModule.forRoot({\n            ...environment().db,\n            entities: [__dirname + \"/../../common/classes/entities/**/*.entity{.ts,.js}\"]\n        } as TypeOrmModuleOptions),\n        CacheModule.register({\n            store: redisStore,\n            url: environment().redis.url,\n            isGlobal: true\n        })\n    ],\n    providers: [PersistenceService, DatabaseService, CachingService],\n    exports: [PersistenceService]\n})\nexport class PersistenceModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PersistenceService.html":{"url":"injectables/PersistenceService.html","title":"injectable - PersistenceService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PersistenceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/persistence/services/persistence.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _fetch\n                            \n                            \n                                create\n                            \n                            \n                                createInCache\n                            \n                            \n                                delete\n                            \n                            \n                                deleteInCache\n                            \n                            \n                                findAll\n                            \n                            \n                                findAllPaginated\n                            \n                            \n                                findOne\n                            \n                            \n                                findOneInCache\n                            \n                            \n                                getQueryBuilder\n                            \n                            \n                                runQuery\n                            \n                            \n                                update\n                            \n                            \n                                updateInCache\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(databaseService: DatabaseService, cachingService: CachingService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/persistence/services/persistence.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        databaseService\n                                                  \n                                                        \n                                                                        DatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cachingService\n                                                  \n                                                        \n                                                                        CachingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _fetch\n                        \n                    \n                \n            \n            \n                \n                        \n                    _fetch(query: Promise, cacheOptions: CacheStrategyOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/persistence/services/persistence.service.ts:86\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                        Promise\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cacheOptions\n                                            \n                                                            CacheStrategyOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(entity: EntityTarget, dto: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/persistence/services/persistence.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                        EntityTarget\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createInCache\n                        \n                    \n                \n            \n            \n                \ncreateInCache(key: string, data: T, ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/persistence/services/persistence.service.ts:66\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(entity: EntityTarget, id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/persistence/services/persistence.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                        EntityTarget\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteInCache\n                        \n                    \n                \n            \n            \n                \ndeleteInCache(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/persistence/services/persistence.service.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(entity: EntityTarget, options: FindOneOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/persistence/services/persistence.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                        EntityTarget\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        FindOneOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllPaginated\n                        \n                    \n                \n            \n            \n                \nfindAllPaginated(entity: EntityTarget, query: PaginateQuery, paginateConfig: PaginateConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/persistence/services/persistence.service.ts:20\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                        EntityTarget\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                query\n                                            \n                                                        PaginateQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                paginateConfig\n                                            \n                                                        PaginateConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(entity: EntityTarget, options: FindOneOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/persistence/services/persistence.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                        EntityTarget\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        FindOneOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneInCache\n                        \n                    \n                \n            \n            \n                \nfindOneInCache(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/persistence/services/persistence.service.ts:62\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getQueryBuilder\n                        \n                    \n                \n            \n            \n                \ngetQueryBuilder(entity?: EntityTarget)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/persistence/services/persistence.service.ts:58\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                        EntityTarget\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SelectQueryBuilder\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        runQuery\n                        \n                    \n                \n            \n            \n                \nrunQuery(query: SelectQueryBuilder, raw: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/persistence/services/persistence.service.ts:54\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                        SelectQueryBuilder\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                raw\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(entity: EntityTarget, id: number, dto: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/persistence/services/persistence.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                        EntityTarget\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateInCache\n                        \n                    \n                \n            \n            \n                \nupdateInCache(key: string, data: T, ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/persistence/services/persistence.service.ts:74\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from \"@nestjs/common\";\nimport { PaginateConfig, Paginated, PaginateQuery } from \"nestjs-paginate\";\nimport { EntityTarget, FindOneOptions, ObjectLiteral, SelectQueryBuilder } from \"typeorm\";\nimport { DatabaseService } from \"./database.service\";\nimport { CachingService } from \"./caching.service\";\nimport { Cacheable, CacheStrategyOptions } from \"src/common/types/types\";\nimport * as utils from \"src/common/utils/utils\";\n\n@Injectable()\nexport class PersistenceService {\n    constructor(\n        private readonly databaseService: DatabaseService,\n        private readonly cachingService: CachingService\n    ) {}\n\n    findAll(entity: EntityTarget, options: FindOneOptions): Promise {\n        return this.databaseService.findAll(entity, options);\n    }\n\n    findAllPaginated(\n        entity: EntityTarget,\n        query: PaginateQuery,\n        paginateConfig: PaginateConfig\n    ): Promise> {\n        return this.databaseService.findAllPaginated(entity, query, paginateConfig);\n    }\n\n    findOne(entity: EntityTarget, options: FindOneOptions): Promise {\n        return this.databaseService.findOne(entity, options);\n    }\n\n    create(entity: EntityTarget, dto: any): Promise {\n        return this.databaseService.create(entity, dto);\n    }\n\n    update(entity: EntityTarget, id: number, dto: any): Promise {\n        if (dto?.id) {\n            // check if the object submitted has an id that is inconsistent with the id in the URL\n            if (dto.id === id) {\n                // if the id field exists and is consistent, delete it just to be safe\n                delete dto.id;\n            } else {\n                // if the id field is consistent with the id param in the request, throw an error\n                throw new HttpException(\"Bad request\", HttpStatus.BAD_REQUEST);\n            }\n        }\n        return this.databaseService.update(entity, id, dto);\n    }\n\n    delete(entity: EntityTarget, id: number): Promise {\n        return this.databaseService.delete(entity, id);\n    }\n\n    runQuery(query: SelectQueryBuilder, raw: boolean = false): Promise {\n        return this.databaseService.runQuery(query, raw);\n    }\n\n    getQueryBuilder(entity?: EntityTarget): SelectQueryBuilder {\n        return this.databaseService.getQueryBuilder(entity);\n    }\n\n    findOneInCache(key: string): Promise> {\n        return this.cachingService.get(key);\n    }\n\n    createInCache(key: string, data: T, ttl?: number): Promise> {\n        // ensure that we are not overwriting a record with a create operation\n        return this.cachingService.get(key).then((cached) => {\n            if (cached) throw new Error(utils.log(\"PersistenceService.createInCache\", `Existing record found for key: ${key}`));\n            return this.cachingService.set(key, data, ttl);\n        });\n    }\n\n    updateInCache(key: string, data: T, ttl?: number): Promise> {\n        // ensure that we are not updating a record that does not exist\n        return this.cachingService.get(key).then((cached) => {\n            if (!cached) throw new Error(utils.log(\"PersistenceService.updateInCache\", `Record not found for key: ${key}`));\n            return this.cachingService.set(key, data, ttl);\n        });\n    }\n\n    deleteInCache(key: string): Promise {\n        return this.cachingService.delete(key);\n    }\n\n    private _fetch(query: Promise, cacheOptions: CacheStrategyOptions): Promise {\n        if (!cacheOptions || (!cacheOptions.cache && !cacheOptions.cached)) return query;\n        const dbFetch: Promise = query.then((data) => {\n            if (cacheOptions.cache) this.cachingService.set(cacheOptions.key, data, cacheOptions?.ttl);\n            return data;\n        });\n        if (cacheOptions.cached)\n            return this.cachingService.get(cacheOptions.key).then((cachable: Cacheable) => {\n                if (cachable) return cachable.data;\n                return dbFetch;\n            });\n        return dbFetch;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RootModule.html":{"url":"modules/RootModule.html","title":"module - RootModule","body":"\n                   \n\n\n\n\n    Modules\n    RootModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RootModule\n\n\n\ncluster_RootModule_imports\n\n\n\n\nFooModule\n\nFooModule\n\n\n\nRootModule\n\nRootModule\n\nRootModule -->\n\nFooModule->RootModule\n\n\n\n\n\nPersistenceModule\n\nPersistenceModule\n\nRootModule -->\n\nPersistenceModule->RootModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/root/root.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            FooModule\n                        \n                        \n                            PersistenceModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { FooModule } from \"../foo/foo.module\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport environment from \"../../../env/env\";\nimport { PersistenceModule } from \"src/modules/persistence/persistence.module\";\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            load: [environment],\n            isGlobal: true\n        }),\n        PersistenceModule,\n        FooModule\n    ]\n})\nexport class RootModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/common/classes/dto/example/example.create.dto.ts\n            \n            class\n            ExampleCreateDTO\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/classes/dto/example/example.get.dto.ts\n            \n            class\n            ExampleGetDTO\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/classes/dto/example/example.update.dto.ts\n            \n            class\n            ExampleUpdateDTO\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/classes/entities/example.entity.ts\n            \n            entity\n            Example\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/filters/default-exception/default-exception.filter.ts\n            \n            class\n            DefaultExceptionFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/api-response/api-response.interceptor.ts\n            \n            injectable\n            APIResponseInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/interceptors/logging/logging.interceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/interfaces/example.interface.ts\n            \n            interface\n            ExampleInterface\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/common/test-data/example.test-data.ts\n            \n            variable\n            exampleTestData\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/test-data/example.test-data.ts\n            \n            variable\n            paginateConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/types/types.ts\n            \n            interface\n            APIError\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/types/types.ts\n            \n            interface\n            APIResponseError\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/types/types.ts\n            \n            interface\n            APIResponseMeta\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/types/types.ts\n            \n            interface\n            APIResponseOneData\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/types/types.ts\n            \n            interface\n            APIResponsePaginatedData\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/types/types.ts\n            \n            interface\n            APIResponseSuccess\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/common/types/types.ts\n            \n            type alias\n            APIResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/types/types.ts\n            \n            type alias\n            APIResponseData\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/types/types.ts\n            \n            type alias\n            Cacheable\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/types/types.ts\n            \n            type alias\n            CacheStrategyOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/types/types.ts\n            \n            type alias\n            KeyBuilder\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/utils/utils.ts\n            \n            function\n            getKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/utils/utils.ts\n            \n            function\n            log\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/foo/endpoints/example/example.controller.ts\n            \n            controller\n            ExampleController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/modules/foo/endpoints/example/example.controller.ts\n            \n            variable\n            path\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/foo/endpoints/example/example.service.ts\n            \n            injectable\n            ExampleService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/modules/foo/endpoints/example/example.service.ts\n            \n            variable\n            paginateConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/modules/persistence/persistence.module.ts\n            \n            variable\n            redisStore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/persistence/services/caching.service.ts\n            \n            injectable\n            CachingService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/persistence/services/database.service.ts\n            \n            injectable\n            DatabaseService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/modules/persistence/services/persistence.service.ts\n            \n            injectable\n            PersistenceService\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                        src/modules/persistence/tests/mocks/cache.config.mock.ts\n            \n            variable\n            getConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/modules/persistence/tests/mocks/cache.config.mock.ts\n            \n            variable\n            store\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/modules/persistence/tests/mocks/data-source.config.mock.ts\n            \n            variable\n            getConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/modules/persistence/tests/mocks/data-source.config.mock.ts\n            \n            variable\n            getImports\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/tests/mocks/execution-context.mock.ts\n            \n            variable\n            mockExecutionContext\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/cache-manager : ^2.2.2\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.2\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            cache-manager : ^5.7.6\n        \n            cache-manager-redis-store : ^3.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            mysql2 : ^3.11.3\n        \n            nestjs-paginate : ^9.1.2\n        \n            redis : ^4.7.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            getKey   (src/.../utils.ts)\n                        \n                        \n                            log   (src/.../utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/common/utils/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getKey\n                        \n                    \n                \n            \n            \n                \ngetKey(keyBuilder: KeyBuilder)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                keyBuilder\n                                            \n                                                            KeyBuilder\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(event: string, message: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\naethon-nestjs-boilerplate\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nAethon Holdings Nestjs REST API boilerplate\nRunning\nnpm install\nIn \\env, create env.dev.ts, env.test.ts and env.prod.ts based on provided env.example.ts.\nnpm run start:dev to run based on configuration in env.dev.ts.  Each of run start:dev, start:test overwrites env.ts with the corresponding env file,  before bootstraping NestJS, thus configuring the system.\nCheck the http://localhost:3000/api/v0.1/swagger for the Swagger endpoint.\nDependencies/ extensions included\n\nNestJS core\nPrettier\nJest\nnestjs/config\nTypeORM + mySQL\nnestjs/paginate\nnestjs/swagger\nclass-validator\nredis\ncompodoc\n\nFeatures set up\n\nSeparate database module\nStandardised CRUD template\nStandardised responses\nRequest, response and error event logging\nParameter validation\nCaching with Redis\napi version paths\n\nTo do\n\nJWT auth\n\nTechnical notes\nAPI response schema\nAll API responses conform to the APIResponse type, whereby  is the DTO type and: \nexport type APIResponse = APIResponseData | APIResponseError;\nData response\nExample :export interface APIResponseData {\n  success: boolean = true                       // true for OK code\n  path: string                                  // the endpoint path\n  requestMethod: keyof typeof RequestMethod     // 'GET' | 'POST' | 'PUT' etc.\n  paginated: boolean                            // true if response is paginated\n  payload: T | T[] | Paginate                // DTO payload, potentially paginated \n}Error Response\nExample :export interface APIResponseError {\n  success: boolean = false                      // false for true\n  path: string                                  // the endpoint path\n  requestMethod: keyof typeof RequestMethod     // 'GET' | 'POST' | 'PUT' etc.\n  error: {\n    status: number                              // HTTP response code\n    message: string                             // error message\n  }\n}Pagination of type T DTOs in APIResponseData is based on nestjs/paginate under the following interface:\nExample :export interface Root {\n    data: T[]                                   // paginated DTO array\n    meta: {                                     // pagination features, based on config and query\n        itemsPerPage: number                    // standard items per page\n        totalItems: number                      // total items being paginated\n        currentPage: number                     // page offset\n        totalPages: number                      // max page count\n        sortBy: string[][]                      // [[fieldName:string, 'ASC' | 'DESC']]\n        search: string                          // search across columns\n        filter: Filter                          // where query object\n    }\n    links: {\n        first: string                           // link to api call at beginning of pagination\n        previous: string                        // link to previous page\n        current: string                         // current current page api call link\n        next: string                            // link to next page\n        last: string                            // link to last page\n    }\n}PersistenceService and Caching\nInteractions with both the database and cache are abstracted out of the services into the PersistenceService.  The service then utilises the DatabaseService and CachingService to interact with these two components.\nIn this schema, controller-related services thus are focused on implementing business logic and flow, while the PersistenceService offers a single entry point to persistence functionality.\nIn this repo, PersistenceService exposes basic CRUD database methods such as findOne(), and similar cache interaction methods such as findOneInCache(). These additional logical layers are there in order to enable smoother decoupling of the caching or DB solutions while giving services a single \"point of contact\" with the back end. The PersistenceService can also be utilised to enforce consistent global query caching strategies, if needed, coupling database and cache operations with specific strategies as needed.\nTo enforce consistent key usage across all modules, the function utils.getKey(keyBuilder: KeyBuilder): string in \\src\\common\\utils\\utils.ts returns concatenated cache key strings.\nTesting\nExample unit tests are included for all key components.  Run npm run test to run all Jest tests.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) Feross Aboukhadijeh\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ExampleModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FooModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PersistenceModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RootModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ExampleModule\n\n\n\ncluster_ExampleModule_imports\n\n\n\ncluster_ExampleModule_providers\n\n\n\ncluster_FooModule\n\n\n\ncluster_PersistenceModule\n\n\n\ncluster_PersistenceModule_exports\n\n\n\ncluster_PersistenceModule_providers\n\n\n\ncluster_RootModule\n\n\n\n\nPersistenceModule\n\nPersistenceModule\n\n\n\nExampleModule\n\nExampleModule\n\nExampleModule -->\n\nPersistenceModule->ExampleModule\n\n\n\n\n\nPersistenceService \n\nPersistenceService \n\nPersistenceService  -->\n\nPersistenceModule->PersistenceService \n\n\n\n\n\nRootModule\n\nRootModule\n\nRootModule -->\n\nPersistenceModule->RootModule\n\n\n\n\n\nFooModule\n\nFooModule\n\nFooModule -->\n\nExampleModule->FooModule\n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nPersistenceModule -->\n\nDatabaseService->PersistenceModule\n\n\n\nExampleModule -->\n\nDatabaseService->ExampleModule\n\n\n\n\n\nExampleService\n\nExampleService\n\nExampleModule -->\n\nExampleService->ExampleModule\n\n\n\nRootModule -->\n\nFooModule->RootModule\n\n\n\n\n\nCachingService\n\nCachingService\n\nPersistenceModule -->\n\nCachingService->PersistenceModule\n\n\n\n\n\nPersistenceService\n\nPersistenceService\n\nPersistenceModule -->\n\nPersistenceService->PersistenceModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    1 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : Boilerplate NestJS configuration for Aethon Pte Ltd\n        \n            License : MIT\n        \n            Repository : github:aethonholdings/aethon-nestjs-boilerplate\n        \n            Author : Konstantinos Dimitriou\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            APIResponse   (src/.../types.ts)\n                        \n                        \n                            APIResponseData   (src/.../types.ts)\n                        \n                        \n                            Cacheable   (src/.../types.ts)\n                        \n                        \n                            CacheStrategyOptions   (src/.../types.ts)\n                        \n                        \n                            KeyBuilder   (src/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/types/types.ts\n    \n    \n        \n            \n                \n                    \n                    APIResponse\n                \n            \n            \n                \n                            APIResponseData | APIResponseError\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    APIResponseData\n                \n            \n            \n                \n                            APIResponseOneData | APIResponsePaginatedData\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Cacheable\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CacheStrategyOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    KeyBuilder\n                \n            \n            \n                \n                        any[]\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            exampleTestData   (src/.../example.test-data.ts)\n                        \n                        \n                            getConfig   (src/.../cache.config.mock.ts)\n                        \n                        \n                            getConfig   (src/.../data-source.config.mock.ts)\n                        \n                        \n                            getImports   (src/.../data-source.config.mock.ts)\n                        \n                        \n                            mockExecutionContext   (src/.../execution-context.mock.ts)\n                        \n                        \n                            paginateConfig   (src/.../example.test-data.ts)\n                        \n                        \n                            paginateConfig   (src/.../example.service.ts)\n                        \n                        \n                            path   (src/.../example.controller.ts)\n                        \n                        \n                            redisStore   (src/.../persistence.module.ts)\n                        \n                        \n                            store   (src/.../cache.config.mock.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/test-data/example.test-data.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        exampleTestData\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ExampleCreateDTO[]\n\n                    \n                \n                \n                    \n                        Default value : [\n    {\n        firstName: \"John\",\n        lastName: \"Doe\",\n        isActive: true\n    },\n    {\n        firstName: \"Jane\",\n        lastName: \"Doe\",\n        isActive: false\n    },\n    {\n        firstName: \"John\",\n        lastName: \"Smith\",\n        isActive: true\n    }\n]\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        paginateConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PaginateConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n    sortableColumns: [\"id\"],\n    defaultSortBy: [[\"id\", \"ASC\"]]\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/persistence/tests/mocks/cache.config.mock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): CacheModuleOptions> => {\n    return {\n        store: store,\n        url: environment().redis.url,\n        isGlobal: true\n    };\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        store\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"cache-manager-redis-store\").redisStore\n                    \n                \n\n\n        \n    \n\n    src/modules/persistence/tests/mocks/data-source.config.mock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): TypeOrmModuleOptions => {\n    return {\n        type: \"sqlite\",\n        database: \":memory:\",\n        entities: [\"src/common/classes/entities/**/*.entity.ts\"],\n        synchronize: true,\n        dropSchema: true,\n        logging: false,\n        keepConnectionAlive: true\n    };\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getImports\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (entities: EntityClassOrSchema[]) => {\n    return [TypeOrmModule.forRoot(getConfig()), TypeOrmModule.forFeature(entities)];\n}\n                    \n                \n\n\n        \n    \n\n    src/tests/mocks/execution-context.mock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockExecutionContext\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {\n    return {\n        switchToHttp: jest.fn().mockReturnValue({}),\n        getRequest: jest.fn().mockReturnValue({})\n    };\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/foo/endpoints/example/example.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        paginateConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PaginateConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n    sortableColumns: [\"id\"],\n    defaultSortBy: [[\"id\", \"ASC\"]]\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/foo/endpoints/example/example.controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"example\"\n                    \n                \n\n\n        \n    \n\n    src/modules/persistence/persistence.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        redisStore\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('cache-manager-redis-store').redisStore\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
